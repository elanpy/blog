{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/Hexo常用命令.md","hash":"d6eb25a8e5acffab502b0ed6261a9acfc125903f","modified":1659276661563},{"_id":"source/_posts/安卓逆向案例（一）：某某新闻逆向.md","hash":"ed8dc72d59fced5c25872fe3c605845b98d18fde","modified":1660988481114},{"_id":"source/_posts/深度学习-相似度点选.md","hash":"bcd1d70314375f3bd0fd746b6e79992357d60a30","modified":1659276587681},{"_id":"source/_posts/.DS_Store","hash":"06a2ebf3988326c6bb6e28db8683715ea5027df5","modified":1660964153345},{"_id":"source/.DS_Store","hash":"adafb74b13f721d0c2924432c0fa04e5c9d9251b","modified":1660986844743},{"_id":"source/photo/index.md","hash":"3178df88247ccf65693e2c5d8eb6a20e9475d638","modified":1659189196294},{"_id":"source/categories/index.md","hash":"da42992c828251fd8e707d32304dca07ed2f9073","modified":1659189196294},{"_id":"source/photo/.DS_Store","hash":"148e85eebaf6e06b4be2074298eac10db4ebdb3d","modified":1660919825824},{"_id":"source/about/index.md","hash":"b611d3ee3b86da446ec9a96e561f2a851848f4c7","modified":1659189196294},{"_id":"source/_posts/Mac常用命令与快捷键.md","hash":"9ffc09396d67ada801b4f3d27a4812ed83230d24","modified":1660918594984},{"_id":"source/link/index.md","hash":"685105fad8bab7c83fcc357b749482186d7c6835","modified":1659189196294},{"_id":"source/tags/index.md","hash":"a2ed06804562e4967243b69f2156e87e2931438c","modified":1659189196294},{"_id":"source/photo/camera/index.md","hash":"787fae5fe2dcd0ca178cf4739b0fdb0cd2785eef","modified":1660920092184},{"_id":"themes/butterfly/package.json","hash":"3bcb70e12282156703626e238e3719611c34c3b7","modified":1659189658183},{"_id":"themes/butterfly/README.md","hash":"cde88743f77bad1b463aa78049398b19f878090e","modified":1659189658173},{"_id":"themes/butterfly/plugins.yml","hash":"0194c4fb88a6be30d983a83ac22072bb4d799c9a","modified":1659189658183},{"_id":"themes/butterfly/README_CN.md","hash":"01b4feffb432293223f540921ce2cde748b2d2fe","modified":1659189658173},{"_id":"themes/butterfly/_config.yml","hash":"26a7fa8c79b3732318e751875aff79975abe3775","modified":1659189658173},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1659189658173},{"_id":"themes/butterfly/languages/default.yml","hash":"1e37a3695d50e3e61d7c36e58a6dac872a4a56cd","modified":1659189658174},{"_id":"themes/butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1659189658174},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"28b6f0c39155651d747eb595e0a283bc97be2e09","modified":1659189658174},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1659189658183},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"947f794e862bb2813e36887f777bdb760f70a322","modified":1659189658174},{"_id":"themes/butterfly/languages/en.yml","hash":"d1bb560698eb8b0079495b7b18b44facb610f9fd","modified":1659189658174},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1659189658174},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1659189658183},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1659189658183},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1659189658183},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1659189658172},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1659189658173},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1659189658174},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1659189658173},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"de8e618ec03295561c667a49e1c383213b856f6f","modified":1659189658174},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"a557280a25f63f4312afad63fc3303ec74165557","modified":1659189658176},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"594a977ebe8d97e60fa3d7cb40fc260ded4d8a58","modified":1659189658174},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"acfe765fb2c607bff7198630dbfa53a888c36357","modified":1659189658184},{"_id":"themes/butterfly/scripts/events/init.js","hash":"b4940a5c73d3a5cd8bb5883e3041ecdd905a74e0","modified":1659189658184},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1659189658174},{"_id":"themes/butterfly/.github/stale.yml","hash":"5e8ea535424e8112439135d21afc5262c0bc0b39","modified":1659189658173},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"a3d1f417965ca20253c36f9e93429f3df6268856","modified":1659189658184},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1659189658184},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1659189658185},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1659189658184},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1659189658185},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1659189658185},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"67e4f5a66d4b8cabadbaad0410628364ee75e0ae","modified":1659189658172},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"3cfc46c749e2fd7ae9c2a17206238ed0e0e17e7d","modified":1659189658184},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1659189658185},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"f79c99f6c5b626c272dc2bed2b0250d6b91bb28a","modified":1659189658185},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1659189658185},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1659189658184},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1659189658185},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1659189658185},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1659189658184},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1659189658186},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1659189658184},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"ee3e70098eb0849497d50b75e18cf4a27c397d52","modified":1659189658184},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1659189658185},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"b4cd617c619d1a0df93603721a6fa1317526174b","modified":1659189658185},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"21379ed2dccb69c43b893895c9d56238c11e5f43","modified":1659189658184},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"d368a8830e506c8b5eb6512b709ec8db354d5ea1","modified":1659189658185},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1659189658177},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"699d0d2cff233628752956c4434125c8203f7d63","modified":1659189658177},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1659189658190},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":1659189658177},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"763dab5c83f50c1c62fffc9a9dfedea29bb4e629","modified":1659189658185},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1659189658190},{"_id":"themes/butterfly/source/css/var.styl","hash":"4890a40366d6443f8b8942a4e9a6dce9fe3494f5","modified":1659189658190},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1659189658190},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1659189658191},{"_id":"themes/butterfly/source/js/main.js","hash":"73d2624ed465e4cfb1ebb00b2c8a24f5fc29bb21","modified":1659189658191},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1659189658175},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"15530d9ac59c576d79af75dd687efe71e8d261b0","modified":1659189658175},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1659189658175},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1659189658175},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1659189658191},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1659189658175},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1659189658175},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1659189658175},{"_id":"themes/butterfly/source/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1659189658192},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"8f41fa9732ea654a10f6e666d9c782c7e27e5ea6","modified":1659189658175},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1659189658176},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"0d10532648d0335254f21a3b7d8676cb96ea8eba","modified":1659189658176},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1659189658176},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1659189658176},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1659189658177},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"65a23b5170204e55b813ce13a79d799b66b7382c","modified":1659189658175},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1659189658176},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1659189658175},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"aa175e2254704335f4da09175e59ef2375ca7d03","modified":1659189658175},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"fed069baa9b383f57db32bb631115071d29bdc60","modified":1659189658177},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"6311eda08e4515281c51bd49f43902a51832383c","modified":1659189658177},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"78a3abd90bb3c18cd773d3d5abac3541e7f415e5","modified":1659189658176},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"8c2524e843adfce00b16e31ee355f14ce9ffb8ba","modified":1659189658176},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1659189658176},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1659189658180},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1659189658181},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1659189658181},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1659189658182},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1659189658177},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"6d6474ef186c18d9b4f334e1f735eadd6699effa","modified":1659189658181},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1659189658177},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1659189658182},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"bae2f32ac96cebef600c1e37eaa8467c9a7e5d92","modified":1659189658182},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1659189658177},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1659189658182},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1659189658182},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1659189658182},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1659189658182},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1659189658182},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1659189658183},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":1659189658182},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1659189658183},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"7fb096656c8a6c21a4b6a5100885b1081d6021ed","modified":1659189658183},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1659189658183},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"644d520fe80cc82058467708ab82ccad313b0c27","modified":1659189658186},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1659189658186},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1659189658187},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1659189658187},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"a0010d833ed30211601c1e0bbbc68e85b77428c6","modified":1659189658187},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1659189658183},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"714f19e7d66df84938bd1b82b33d5667abe1f147","modified":1659189658186},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1659189658187},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1659189658187},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"26be2afa9d4e7016cf3c42a6cd166f01e8e4ad5c","modified":1659189658187},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1659189658187},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ef21990de28bd75dcd0f88b8d616e1a7a137502f","modified":1659189658187},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1659189658187},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"d97c1722ce0fcc319f1f90ec2d51f9d746748e2b","modified":1659189658187},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bd88ee30ebf8ca2e7b4d3a034c317fd61733921f","modified":1659189658188},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"51e45625929d57c9df3ba9090af99b9b7bb9a15b","modified":1659189658189},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"15056fba0bd5a45ea8dc97eb557f6929ff16797a","modified":1659189658187},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"8314e9749eb1ae40c4bae9735b7a6638b2d6876a","modified":1659189658188},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"39d61cbe0c1e937f83ba3b147afaa29b4de2f87d","modified":1659189658189},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1659189658188},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"69f8e9414526dfda3af9a71c8e528fdd0ecbbfe5","modified":1659189658188},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"25e58a7a8bda4b73d0a0e551643ca01b09ccd7e5","modified":1659189658189},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6f4b4ede52305bce9b22c8c897dcbde8af6e2ce4","modified":1659189658188},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1659189658188},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":1659189658188},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1659189658188},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1659189658188},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"a92984f566c97bb4179f34be79240af1552c6f17","modified":1659189658188},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"8c90483d461e09cb06e91b16d8bb7b3205b0a40c","modified":1659189658188},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1659189658190},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1659189658189},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1659189658191},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"a310e48f826a4cacc55d8e68f43806e5085554f6","modified":1659189658189},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1659189658189},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1659189658189},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1659189658189},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1659189658189},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1659189658189},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1659189658189},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1659189658189},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1659189658178},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1659189658178},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"9feb248552667c53ce1b19bc7a295215f8c77008","modified":1659189658191},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1659189658190},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1659189658179},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1659189658178},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"98ef20f8a3b10c1692f9b2b3c06033d2da8a8eae","modified":1659189658179},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1659189658179},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"2d8fc3fb8f9aec61400acf3c94070bd8539058f8","modified":1659189658179},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"8ec24c1939895ac0db2b2e8700bc9307b4ceb53c","modified":1659189658179},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1659189658178},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"22e2ef30fe5eb1db7566e89943c74ece029b2a8e","modified":1659189658179},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"591ef23c583690bd74af0cafb09af64ba5bd8151","modified":1659189658179},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"2e26af16d359ba362fa611575d7f547848057c0c","modified":1659189658179},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"190b1cca42c7f73c50f62f07d0751449941bff3f","modified":1659189658179},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"a737046e730eb7264606ba0536218964044492f9","modified":1659189658180},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"e18fbd88d8942e53e771f29b26209ab735c5c567","modified":1659189658180},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"e9bdf80d6796afc04eb809dbbe780d97f22c7fcd","modified":1659189658179},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1659189658180},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1659189658180},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"15462d1ed04651ad3b430c682842ac400f6f9b47","modified":1659189658180},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"8e33aca36a4d3ae9e041ba05ced8eff56ae38f77","modified":1659189658180},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1659189658179},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1659189658180},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1659189658180},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"f4dc7d02c8192979404ae9e134c5048d3d0a76e2","modified":1659189658180},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"8ca02f97bfa93fff9cce5b8eb8feb234e7beeb98","modified":1659189658181},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1659189658181},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d19e1c2c0a50f0e4547d71a17b9be88e8152f17c","modified":1659189658181},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"233907dd7f5b5f33412701d2ccffbc0bbae8707b","modified":1659189658181},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1659189658178},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1659189658177},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1659189658178},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"dd0bc119029b62dce5dc965d5de7377e438fa29a","modified":1659189658181},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"ab167c00da4506f591b96f0591bf5bd214a26d4b","modified":1659189658181},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"5f648086a33a32d169a2f8d8c549c08aa02f67db","modified":1659189658178},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1659189658178},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"2be601477e1b81eee90a00c14ce5c8761d19a332","modified":1659189658178},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1659189658181},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"e8245d0b4933129bb1c485d8de11a9e52e676348","modified":1659189658181},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"58406a7a3bf45815769f652bf3ef81e57dcd07eb","modified":1659189658178},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"178c9cdcc4ce5a006885b24ce4a3d624e4734899","modified":1659189658181},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1659189658182},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1659189658186},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"f61d63724ea5c5f352568b3a16bde023affefbe5","modified":1659189658182},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1659189658186},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1659189658182},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1659189658186},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1659189658186},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1659189658186},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1659189658182},{"_id":"public/tags/index.html","hash":"942b3b0a6fc01d71ba7f6f46533a62c2d8ae5a7f","modified":1660988541212},{"_id":"public/about/index.html","hash":"e4fb8785cad52deb85d3661d75a22dea6e682971","modified":1660988541212},{"_id":"public/link/index.html","hash":"9b4fe33801657cf1ccfe7642bfcfb605a886b319","modified":1660988541212},{"_id":"public/categories/index.html","hash":"a26f0a7cc2b9dcb0dd14a169e5e0823f46d0e0bc","modified":1660988541212},{"_id":"public/photo/index.html","hash":"1bb8fbf30430ae3a8188dcec1bd48f8563dd0c12","modified":1660988541212},{"_id":"public/photo/camera/index.html","hash":"e78e4c43a6864ee840e2acf1569c0bebf52eb6bb","modified":1660988541212},{"_id":"public/posts/d5cccb14.html","hash":"c2e7305979537fc56c5777cc3807a76b738accc9","modified":1660988541212},{"_id":"public/posts/845852d9.html","hash":"677be130299eb6b7613dd7c73f574b582aa63501","modified":1660988541212},{"_id":"public/posts/24caea6b.html","hash":"f98315c258d092f6a756ca1b54722d57732a9b93","modified":1660988541212},{"_id":"public/posts/443336a2.html","hash":"fc160a59c70fbda5f03c838f5faa3ff152af6f14","modified":1660988541212},{"_id":"public/archives/2022/index.html","hash":"9ebac4225e4254058b9668a1af99f692da65b5ad","modified":1660988541212},{"_id":"public/archives/2022/07/index.html","hash":"7d0dfc4cacf1e82b4ebd3330807e393879d4819b","modified":1660988541212},{"_id":"public/archives/index.html","hash":"4f315194bee8b2b2d5d7394e2fa583e1aae8573f","modified":1660988541212},{"_id":"public/archives/2022/08/index.html","hash":"4986195e20cf9515c982f188a70d98b0945ed4b4","modified":1660988541212},{"_id":"public/tags/blog/index.html","hash":"680315ef55f9aa04d2bfee8a6bce045ae19e0e27","modified":1660988541212},{"_id":"public/tags/hexo/index.html","hash":"9b94b5f25d285697956040945f9bfe6ffd3c9737","modified":1660988541212},{"_id":"public/index.html","hash":"4dc6d201f34c4a7def28da1b495ba2266450204a","modified":1660988541212},{"_id":"public/tags/安卓逆向/index.html","hash":"0da96b1201177ec6a0a71f4c8bca895a3b4c241a","modified":1660988541212},{"_id":"public/tags/python/index.html","hash":"ef3780b790534d0bc7caacf1c9ab6f61c3b4050c","modified":1660988541212},{"_id":"public/tags/深度学习/index.html","hash":"206c86c0bff88b254721776c7db3b163c2494023","modified":1660988541212},{"_id":"public/categories/python/index.html","hash":"469464e14e2ced8c4089432c2019ebb6c593e02e","modified":1660988541212},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1660988541212},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1660988541212},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1660988541212},{"_id":"public/js/search/algolia.js","hash":"9feb248552667c53ce1b19bc7a295215f8c77008","modified":1660988541212},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1660988541212},{"_id":"public/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1660988541212},{"_id":"public/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1660988541212},{"_id":"public/css/index.css","hash":"80839d5fe23c1e84a76d918318e9c62e50d239f4","modified":1660988541212},{"_id":"public/js/main.js","hash":"73d2624ed465e4cfb1ebb00b2c8a24f5fc29bb21","modified":1660988541212},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1660988541212}],"Category":[{"name":"python","_id":"cl71powxq000699ui9ihfb68g"}],"Data":[],"Page":[{"title":"图库","date":"2022-07-04T09:26:16.000Z","type":"photo","_content":"\n<div class=\"gallery-group-main\">\n{% galleryGroup '随手拍' '出门记录生活' '/photo/camera' http://tva1.sinaimg.cn/large/008lIB40ly1h3vzmm5mwsj339l52b4qt.jpg %}\n</div>\n\n\n","source":"photo/index.md","raw":"---\ntitle: 图库\ndate: 2022-07-04 17:26:16\ntype: photo\n---\n\n<div class=\"gallery-group-main\">\n{% galleryGroup '随手拍' '出门记录生活' '/photo/camera' http://tva1.sinaimg.cn/large/008lIB40ly1h3vzmm5mwsj339l52b4qt.jpg %}\n</div>\n\n\n","updated":"2022-07-30T13:53:16.294Z","path":"photo/index.html","comments":1,"layout":"page","_id":"cl71powxk000099ui23zu2hz9","content":"<div class=\"gallery-group-main\">\n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='http://tva1.sinaimg.cn/large/008lIB40ly1h3vzmm5mwsj339l52b4qt.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">随手拍</div>\n  <p>出门记录生活</p>\n  <a href='/photo/camera'></a>\n  </figcaption>\n  </figure>\n  \n</div>\n\n\n","site":{"data":{}},"cover":"http://tva1.sinaimg.cn/large/008lIB40ly1h3vvk48c1lj33y8280e87.jpg","excerpt":"","more":"<div class=\"gallery-group-main\">\n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='http://tva1.sinaimg.cn/large/008lIB40ly1h3vzmm5mwsj339l52b4qt.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">随手拍</div>\n  <p>出门记录生活</p>\n  <a href='/photo/camera'></a>\n  </figcaption>\n  </figure>\n  \n</div>\n\n\n"},{"title":"标签","date":"2022-07-04T04:14:19.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2022-07-04 12:14:19\ntype: tags\n---\n","updated":"2022-07-30T13:53:16.294Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl71powxo000299ui7kzchrh6","content":"","site":{"data":{}},"cover":"http://tva1.sinaimg.cn/large/008lIB40ly1h3vvk48c1lj33y8280e87.jpg","excerpt":"","more":""},{"title":"自我介绍","date":"2022-07-04T03:35:34.000Z","layout":"about","_content":"## 基本情况\n- 97年，在吉林出生和长大\n- 比较中二，想象力太丰富，没办法\n- 希望世界和平\n## 兴趣爱好\n- 摄影\n- 音乐\n- 敲代码","source":"about/index.md","raw":"---\ntitle: 自我介绍\ndate: 2022-07-04 11:35:34\nlayout: about\n---\n## 基本情况\n- 97年，在吉林出生和长大\n- 比较中二，想象力太丰富，没办法\n- 希望世界和平\n## 兴趣爱好\n- 摄影\n- 音乐\n- 敲代码","updated":"2022-07-30T13:53:16.294Z","path":"about/index.html","comments":1,"_id":"cl71powxp000499ui78nq1je6","content":"<h2 id=\"基本情况\"><a href=\"#基本情况\" class=\"headerlink\" title=\"基本情况\"></a>基本情况</h2><ul>\n<li>97年，在吉林出生和长大</li>\n<li>比较中二，想象力太丰富，没办法</li>\n<li>希望世界和平</li>\n</ul>\n<h2 id=\"兴趣爱好\"><a href=\"#兴趣爱好\" class=\"headerlink\" title=\"兴趣爱好\"></a>兴趣爱好</h2><ul>\n<li>摄影</li>\n<li>音乐</li>\n<li>敲代码</li>\n</ul>\n","site":{"data":{}},"cover":"http://tva1.sinaimg.cn/large/008lIB40ly1h3vvk48c1lj33y8280e87.jpg","excerpt":"","more":"<h2 id=\"基本情况\"><a href=\"#基本情况\" class=\"headerlink\" title=\"基本情况\"></a>基本情况</h2><ul>\n<li>97年，在吉林出生和长大</li>\n<li>比较中二，想象力太丰富，没办法</li>\n<li>希望世界和平</li>\n</ul>\n<h2 id=\"兴趣爱好\"><a href=\"#兴趣爱好\" class=\"headerlink\" title=\"兴趣爱好\"></a>兴趣爱好</h2><ul>\n<li>摄影</li>\n<li>音乐</li>\n<li>敲代码</li>\n</ul>\n"},{"title":"link","date":"2022-07-04T04:16:29.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2022-07-04 12:16:29\ntype: link\n---\n","updated":"2022-07-30T13:53:16.294Z","path":"link/index.html","comments":1,"layout":"page","_id":"cl71powxs000899uicxkzhhjc","content":"","site":{"data":{}},"cover":"http://tva1.sinaimg.cn/large/008lIB40ly1h3vvk48c1lj33y8280e87.jpg","excerpt":"","more":""},{"title":"分类","date":"2022-07-04T03:38:54.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-07-04 11:38:54\ntype: categories\n---\n","updated":"2022-07-30T13:53:16.294Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl71powxs000a99ui6myc7u98","content":"","site":{"data":{}},"cover":"http://tva1.sinaimg.cn/large/008lIB40ly1h3vvk48c1lj33y8280e87.jpg","excerpt":"","more":""},{"title":"随手拍","date":"2022-07-04T13:54:30.000Z","_content":"\n{% gallery %}\n![IMG_7324.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznp5dllj35ci1hcqv5.jpg)\n![IMG_7446.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznvf0odj35dc3kwu11.jpg)\n![IMG_7499.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznozbsfj31nf2nue5g.jpg)\n![IMG_7501.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznpprt3j32vo3k91ky.jpg)\n![IMG_7513.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznqr6vsj33kw5dc4qq.jpg)\n![IMG_7515.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznq7x6gj33kw5dchdt.jpg)\n![IMG_7546.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznpoh5fj32zo4rn4qp.jpg)\n![IMG_7909.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznqwa54j33br4znb2a.jpg)\n![IMG_7944.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznr7c4zj33kw5dce82.jpg)\n![IMG_7951.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznpj7qrj32ww49nqv5.jpg)\n![IMG_8003_1.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznrjj05j35ch32nhdu.jpg)\n![IMG_8004.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznq7qvtj32wf4bhe81.jpg)\n![IMG_8108.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznsaaisj35dc3kwu0z.jpg)\n![IMG_8222.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznrfyqbj34yh3kwqv6.jpg)\n![IMG_8297.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznps4nxj32lc33me82.jpg)\n![IMG_8298.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vzns36bzj33kw5dce84.jpg)\n![IMG_8301.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vzns6plij32ul4q9x6r.jpg)\n![IMG_8302.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznpzvfij32py3431kx.jpg)\n![IMG_8322.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznqcwzaj31rc2lmhdt.jpg)\n![IMG_8345.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznsz5zdj35dc3kw7wk.jpg)\n![IMG_8347.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznshjlkj34za3i04qr.jpg)\n![IMG_8351.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznvt6l3j33ix4eqx6t.jpg)\n![IMG_8359.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznwiggyj33hn58gqvb.jpg)\n![IMG_8364.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznt2dr5j32ma41cb2b.jpg)\n![IMG_8459.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznp6jm4j31b915zgui.jpg)\n![IMG_8470.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznu5r4nj35dc3kwkjo.jpg)\n![IMG_8489.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vzntg5o0j33gw4zqnpe.jpg)\n![IMG_8524.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vzntvbndj33jn5bhu10.jpg)\n![IMG_8531.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznug1wnj33kw5dce84.jpg)\n![IMG_8570.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznpmck9j31lt2cvqmp.jpg)\n![IMG_8581.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vzntmkrzj337y41s7wj.jpg)\n![IMG_8837.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznzht49j35dc3kwhe4.jpg)\n![IMG_8843.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznwn48sj339l52b4qt.jpg)\n![IMG_8845.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznyb2f2j34yh3d2qva.jpg)\n![IMG_8852.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznqanbfj318n1uy4qp.jpg)\n![IMG_8863.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznxqikhj33kw3yvqvb.jpg)\n![IMG_8878.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznuw95sj329g3e61kz.jpg)\n![IMG_8900.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznydjzfj35dc3kw1l4.jpg)\n![IMG_8920.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznxwlgaj33b54ypb2f.jpg)\n![IMG_8940.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznuxhv2j32jk3e9hdw.jpg)\n![IMG_9037.jpeg](http://tva1.sinaimg.cn/large/008lIB40ly1h5cgefferqj339p3v04qr.jpg)\n![IMG_9229.jpeg](http://tva1.sinaimg.cn/large/008lIB40ly1h5cged88jvj31ss1nv4qp.jpg)\n![IMG_9221.jpeg](http://tva1.sinaimg.cn/large/008lIB40ly1h5cgegkbv8j33iw2pehdw.jpg)\n![IMG_9212.jpeg](http://tva1.sinaimg.cn/large/008lIB40ly1h5cged429uj31km0tx7mo.jpg)\n![IMG_9188.jpeg](http://tva1.sinaimg.cn/large/008lIB40ly1h5cgee4r0pj31wx2ishdv.jpg)\n![IMG_9209_1.jpeg](http://tva1.sinaimg.cn/large/008lIB40ly1h5cgeddyilj31ri1yr4qp.jpg)\n![IMG_9216.jpeg](http://tva1.sinaimg.cn/large/008lIB40ly1h5cged0q2sj315917dtkg.jpg)\n![IMG_9203.jpeg](http://tva1.sinaimg.cn/large/008lIB40ly1h5cgedlcl3j31w51hxx6p.jpg)\n![IMG_9099.jpeg](http://tva1.sinaimg.cn/large/008lIB40ly1h5cgegbgudj33zp2thnph.jpg)\n{% endgallery %}\n\n\n\n","source":"photo/camera/index.md","raw":"---\ntitle: 随手拍\ndate: 2022-07-04 21:54:30\n---\n\n{% gallery %}\n![IMG_7324.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznp5dllj35ci1hcqv5.jpg)\n![IMG_7446.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznvf0odj35dc3kwu11.jpg)\n![IMG_7499.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznozbsfj31nf2nue5g.jpg)\n![IMG_7501.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznpprt3j32vo3k91ky.jpg)\n![IMG_7513.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznqr6vsj33kw5dc4qq.jpg)\n![IMG_7515.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznq7x6gj33kw5dchdt.jpg)\n![IMG_7546.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznpoh5fj32zo4rn4qp.jpg)\n![IMG_7909.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznqwa54j33br4znb2a.jpg)\n![IMG_7944.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznr7c4zj33kw5dce82.jpg)\n![IMG_7951.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznpj7qrj32ww49nqv5.jpg)\n![IMG_8003_1.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznrjj05j35ch32nhdu.jpg)\n![IMG_8004.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznq7qvtj32wf4bhe81.jpg)\n![IMG_8108.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznsaaisj35dc3kwu0z.jpg)\n![IMG_8222.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznrfyqbj34yh3kwqv6.jpg)\n![IMG_8297.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznps4nxj32lc33me82.jpg)\n![IMG_8298.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vzns36bzj33kw5dce84.jpg)\n![IMG_8301.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vzns6plij32ul4q9x6r.jpg)\n![IMG_8302.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznpzvfij32py3431kx.jpg)\n![IMG_8322.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznqcwzaj31rc2lmhdt.jpg)\n![IMG_8345.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznsz5zdj35dc3kw7wk.jpg)\n![IMG_8347.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznshjlkj34za3i04qr.jpg)\n![IMG_8351.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznvt6l3j33ix4eqx6t.jpg)\n![IMG_8359.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznwiggyj33hn58gqvb.jpg)\n![IMG_8364.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznt2dr5j32ma41cb2b.jpg)\n![IMG_8459.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznp6jm4j31b915zgui.jpg)\n![IMG_8470.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznu5r4nj35dc3kwkjo.jpg)\n![IMG_8489.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vzntg5o0j33gw4zqnpe.jpg)\n![IMG_8524.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vzntvbndj33jn5bhu10.jpg)\n![IMG_8531.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznug1wnj33kw5dce84.jpg)\n![IMG_8570.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznpmck9j31lt2cvqmp.jpg)\n![IMG_8581.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vzntmkrzj337y41s7wj.jpg)\n![IMG_8837.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznzht49j35dc3kwhe4.jpg)\n![IMG_8843.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznwn48sj339l52b4qt.jpg)\n![IMG_8845.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznyb2f2j34yh3d2qva.jpg)\n![IMG_8852.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznqanbfj318n1uy4qp.jpg)\n![IMG_8863.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznxqikhj33kw3yvqvb.jpg)\n![IMG_8878.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznuw95sj329g3e61kz.jpg)\n![IMG_8900.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznydjzfj35dc3kw1l4.jpg)\n![IMG_8920.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznxwlgaj33b54ypb2f.jpg)\n![IMG_8940.jpg](http://tva1.sinaimg.cn/large/008lIB40ly1h3vznuxhv2j32jk3e9hdw.jpg)\n![IMG_9037.jpeg](http://tva1.sinaimg.cn/large/008lIB40ly1h5cgefferqj339p3v04qr.jpg)\n![IMG_9229.jpeg](http://tva1.sinaimg.cn/large/008lIB40ly1h5cged88jvj31ss1nv4qp.jpg)\n![IMG_9221.jpeg](http://tva1.sinaimg.cn/large/008lIB40ly1h5cgegkbv8j33iw2pehdw.jpg)\n![IMG_9212.jpeg](http://tva1.sinaimg.cn/large/008lIB40ly1h5cged429uj31km0tx7mo.jpg)\n![IMG_9188.jpeg](http://tva1.sinaimg.cn/large/008lIB40ly1h5cgee4r0pj31wx2ishdv.jpg)\n![IMG_9209_1.jpeg](http://tva1.sinaimg.cn/large/008lIB40ly1h5cgeddyilj31ri1yr4qp.jpg)\n![IMG_9216.jpeg](http://tva1.sinaimg.cn/large/008lIB40ly1h5cged0q2sj315917dtkg.jpg)\n![IMG_9203.jpeg](http://tva1.sinaimg.cn/large/008lIB40ly1h5cgedlcl3j31w51hxx6p.jpg)\n![IMG_9099.jpeg](http://tva1.sinaimg.cn/large/008lIB40ly1h5cgegbgudj33zp2thnph.jpg)\n{% endgallery %}\n\n\n\n","updated":"2022-08-19T14:41:32.184Z","path":"photo/camera/index.html","comments":1,"layout":"page","_id":"cl71powxt000b99ui6g88728g","content":"<div class=\"fj-gallery\"><p><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznp5dllj35ci1hcqv5.jpg\" alt=\"IMG_7324.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznvf0odj35dc3kwu11.jpg\" alt=\"IMG_7446.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznozbsfj31nf2nue5g.jpg\" alt=\"IMG_7499.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznpprt3j32vo3k91ky.jpg\" alt=\"IMG_7501.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznqr6vsj33kw5dc4qq.jpg\" alt=\"IMG_7513.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznq7x6gj33kw5dchdt.jpg\" alt=\"IMG_7515.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznpoh5fj32zo4rn4qp.jpg\" alt=\"IMG_7546.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznqwa54j33br4znb2a.jpg\" alt=\"IMG_7909.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznr7c4zj33kw5dce82.jpg\" alt=\"IMG_7944.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznpj7qrj32ww49nqv5.jpg\" alt=\"IMG_7951.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznrjj05j35ch32nhdu.jpg\" alt=\"IMG_8003_1.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznq7qvtj32wf4bhe81.jpg\" alt=\"IMG_8004.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznsaaisj35dc3kwu0z.jpg\" alt=\"IMG_8108.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznrfyqbj34yh3kwqv6.jpg\" alt=\"IMG_8222.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznps4nxj32lc33me82.jpg\" alt=\"IMG_8297.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vzns36bzj33kw5dce84.jpg\" alt=\"IMG_8298.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vzns6plij32ul4q9x6r.jpg\" alt=\"IMG_8301.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznpzvfij32py3431kx.jpg\" alt=\"IMG_8302.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznqcwzaj31rc2lmhdt.jpg\" alt=\"IMG_8322.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznsz5zdj35dc3kw7wk.jpg\" alt=\"IMG_8345.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznshjlkj34za3i04qr.jpg\" alt=\"IMG_8347.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznvt6l3j33ix4eqx6t.jpg\" alt=\"IMG_8351.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznwiggyj33hn58gqvb.jpg\" alt=\"IMG_8359.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznt2dr5j32ma41cb2b.jpg\" alt=\"IMG_8364.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznp6jm4j31b915zgui.jpg\" alt=\"IMG_8459.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznu5r4nj35dc3kwkjo.jpg\" alt=\"IMG_8470.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vzntg5o0j33gw4zqnpe.jpg\" alt=\"IMG_8489.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vzntvbndj33jn5bhu10.jpg\" alt=\"IMG_8524.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznug1wnj33kw5dce84.jpg\" alt=\"IMG_8531.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznpmck9j31lt2cvqmp.jpg\" alt=\"IMG_8570.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vzntmkrzj337y41s7wj.jpg\" alt=\"IMG_8581.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznzht49j35dc3kwhe4.jpg\" alt=\"IMG_8837.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznwn48sj339l52b4qt.jpg\" alt=\"IMG_8843.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznyb2f2j34yh3d2qva.jpg\" alt=\"IMG_8845.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznqanbfj318n1uy4qp.jpg\" alt=\"IMG_8852.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznxqikhj33kw3yvqvb.jpg\" alt=\"IMG_8863.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznuw95sj329g3e61kz.jpg\" alt=\"IMG_8878.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznydjzfj35dc3kw1l4.jpg\" alt=\"IMG_8900.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznxwlgaj33b54ypb2f.jpg\" alt=\"IMG_8920.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznuxhv2j32jk3e9hdw.jpg\" alt=\"IMG_8940.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h5cgefferqj339p3v04qr.jpg\" alt=\"IMG_9037.jpeg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h5cged88jvj31ss1nv4qp.jpg\" alt=\"IMG_9229.jpeg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h5cgegkbv8j33iw2pehdw.jpg\" alt=\"IMG_9221.jpeg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h5cged429uj31km0tx7mo.jpg\" alt=\"IMG_9212.jpeg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h5cgee4r0pj31wx2ishdv.jpg\" alt=\"IMG_9188.jpeg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h5cgeddyilj31ri1yr4qp.jpg\" alt=\"IMG_9209_1.jpeg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h5cged0q2sj315917dtkg.jpg\" alt=\"IMG_9216.jpeg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h5cgedlcl3j31w51hxx6p.jpg\" alt=\"IMG_9203.jpeg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h5cgegbgudj33zp2thnph.jpg\" alt=\"IMG_9099.jpeg\"></p>\n          </div>\n\n\n\n","site":{"data":{}},"cover":"http://tva1.sinaimg.cn/large/008lIB40ly1h3vvk48c1lj33y8280e87.jpg","excerpt":"","more":"<div class=\"fj-gallery\"><p><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznp5dllj35ci1hcqv5.jpg\" alt=\"IMG_7324.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznvf0odj35dc3kwu11.jpg\" alt=\"IMG_7446.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznozbsfj31nf2nue5g.jpg\" alt=\"IMG_7499.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznpprt3j32vo3k91ky.jpg\" alt=\"IMG_7501.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznqr6vsj33kw5dc4qq.jpg\" alt=\"IMG_7513.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznq7x6gj33kw5dchdt.jpg\" alt=\"IMG_7515.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznpoh5fj32zo4rn4qp.jpg\" alt=\"IMG_7546.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznqwa54j33br4znb2a.jpg\" alt=\"IMG_7909.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznr7c4zj33kw5dce82.jpg\" alt=\"IMG_7944.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznpj7qrj32ww49nqv5.jpg\" alt=\"IMG_7951.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznrjj05j35ch32nhdu.jpg\" alt=\"IMG_8003_1.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznq7qvtj32wf4bhe81.jpg\" alt=\"IMG_8004.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznsaaisj35dc3kwu0z.jpg\" alt=\"IMG_8108.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznrfyqbj34yh3kwqv6.jpg\" alt=\"IMG_8222.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznps4nxj32lc33me82.jpg\" alt=\"IMG_8297.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vzns36bzj33kw5dce84.jpg\" alt=\"IMG_8298.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vzns6plij32ul4q9x6r.jpg\" alt=\"IMG_8301.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznpzvfij32py3431kx.jpg\" alt=\"IMG_8302.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznqcwzaj31rc2lmhdt.jpg\" alt=\"IMG_8322.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznsz5zdj35dc3kw7wk.jpg\" alt=\"IMG_8345.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznshjlkj34za3i04qr.jpg\" alt=\"IMG_8347.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznvt6l3j33ix4eqx6t.jpg\" alt=\"IMG_8351.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznwiggyj33hn58gqvb.jpg\" alt=\"IMG_8359.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznt2dr5j32ma41cb2b.jpg\" alt=\"IMG_8364.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznp6jm4j31b915zgui.jpg\" alt=\"IMG_8459.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznu5r4nj35dc3kwkjo.jpg\" alt=\"IMG_8470.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vzntg5o0j33gw4zqnpe.jpg\" alt=\"IMG_8489.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vzntvbndj33jn5bhu10.jpg\" alt=\"IMG_8524.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznug1wnj33kw5dce84.jpg\" alt=\"IMG_8531.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznpmck9j31lt2cvqmp.jpg\" alt=\"IMG_8570.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vzntmkrzj337y41s7wj.jpg\" alt=\"IMG_8581.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznzht49j35dc3kwhe4.jpg\" alt=\"IMG_8837.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznwn48sj339l52b4qt.jpg\" alt=\"IMG_8843.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznyb2f2j34yh3d2qva.jpg\" alt=\"IMG_8845.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznqanbfj318n1uy4qp.jpg\" alt=\"IMG_8852.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznxqikhj33kw3yvqvb.jpg\" alt=\"IMG_8863.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznuw95sj329g3e61kz.jpg\" alt=\"IMG_8878.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznydjzfj35dc3kw1l4.jpg\" alt=\"IMG_8900.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznxwlgaj33b54ypb2f.jpg\" alt=\"IMG_8920.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3vznuxhv2j32jk3e9hdw.jpg\" alt=\"IMG_8940.jpg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h5cgefferqj339p3v04qr.jpg\" alt=\"IMG_9037.jpeg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h5cged88jvj31ss1nv4qp.jpg\" alt=\"IMG_9229.jpeg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h5cgegkbv8j33iw2pehdw.jpg\" alt=\"IMG_9221.jpeg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h5cged429uj31km0tx7mo.jpg\" alt=\"IMG_9212.jpeg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h5cgee4r0pj31wx2ishdv.jpg\" alt=\"IMG_9188.jpeg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h5cgeddyilj31ri1yr4qp.jpg\" alt=\"IMG_9209_1.jpeg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h5cged0q2sj315917dtkg.jpg\" alt=\"IMG_9216.jpeg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h5cgedlcl3j31w51hxx6p.jpg\" alt=\"IMG_9203.jpeg\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h5cgegbgudj33zp2thnph.jpg\" alt=\"IMG_9099.jpeg\"></p>\n          </div>\n\n\n\n"}],"Post":[{"title":"Mac常用命令与快捷键","abbrlink":"845852d9","date":"2022-08-16T08:53:25.000Z","top_img":"http://tva1.sinaimg.cn/large/008lIB40ly1h5cffa4m0oj31kw0w0qv6.jpg","cover":"http://tva1.sinaimg.cn/large/008lIB40ly1h5cffa4m0oj31kw0w0qv6.jpg","_content":"\n# 常用命令\n\n### 以管理员身份查看占用指定端口进程\n\n```shell\nsudo lsof -i:8888|grep LISTEN\n```\n\n### 解压压缩包到指定目录\n\n```shell\nunzip -d /tmp test.zip\n```\n\n### 查找文件\n\n```shell\n find  \"要搜索的文件加路径\" -name \"要查找的文件名(可以使用正则)\"\n```\n\n\n\n-------\n\n\n\n# 常用快捷键\n\n\n\n| 动作                                     | 快捷键                     |\n| :--------------------------------------- | :------------------------- |\n| 快速全屏或取消全屏（需要软件支持）       | `control` + `option` + `F` |\n| 跳到文本开头/结尾（加 shift 可以选中）   | `command` + `左/右箭头`    |\n| 跳到上一次词头/词尾（加 shift 可以选中） | `option` + `左/右箭头`     |\n| 反向搜索命令行历史记录                   | `control` + `R`            |\n| 终端行清屏                               | `command` + `K`            |\n| 终端清除到上一命令                       | `command` + `L`            |\n| 左右切换桌面                             | `control` + `左/右箭头`    |\n| 新建窗口                                 | `command` + `N`            |\n| 新建标签页                               | `command` + `T`            |\n\n","source":"_posts/Mac常用命令与快捷键.md","raw":"---\ntitle: Mac常用命令与快捷键\nabbrlink: 845852d9\ndate: 2022-08-16 16:53:25\ntags: \ntop_img: http://tva1.sinaimg.cn/large/008lIB40ly1h5cffa4m0oj31kw0w0qv6.jpg\ncover: http://tva1.sinaimg.cn/large/008lIB40ly1h5cffa4m0oj31kw0w0qv6.jpg\n---\n\n# 常用命令\n\n### 以管理员身份查看占用指定端口进程\n\n```shell\nsudo lsof -i:8888|grep LISTEN\n```\n\n### 解压压缩包到指定目录\n\n```shell\nunzip -d /tmp test.zip\n```\n\n### 查找文件\n\n```shell\n find  \"要搜索的文件加路径\" -name \"要查找的文件名(可以使用正则)\"\n```\n\n\n\n-------\n\n\n\n# 常用快捷键\n\n\n\n| 动作                                     | 快捷键                     |\n| :--------------------------------------- | :------------------------- |\n| 快速全屏或取消全屏（需要软件支持）       | `control` + `option` + `F` |\n| 跳到文本开头/结尾（加 shift 可以选中）   | `command` + `左/右箭头`    |\n| 跳到上一次词头/词尾（加 shift 可以选中） | `option` + `左/右箭头`     |\n| 反向搜索命令行历史记录                   | `control` + `R`            |\n| 终端行清屏                               | `command` + `K`            |\n| 终端清除到上一命令                       | `command` + `L`            |\n| 左右切换桌面                             | `control` + `左/右箭头`    |\n| 新建窗口                                 | `command` + `N`            |\n| 新建标签页                               | `command` + `T`            |\n\n","slug":"Mac常用命令与快捷键","published":1,"updated":"2022-08-19T14:16:34.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl71powxm000199ui1rf0a8ri","content":"<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><h3 id=\"以管理员身份查看占用指定端口进程\"><a href=\"#以管理员身份查看占用指定端口进程\" class=\"headerlink\" title=\"以管理员身份查看占用指定端口进程\"></a>以管理员身份查看占用指定端口进程</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo lsof -i:8888|grep LISTEN</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解压压缩包到指定目录\"><a href=\"#解压压缩包到指定目录\" class=\"headerlink\" title=\"解压压缩包到指定目录\"></a>解压压缩包到指定目录</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip -d /tmp test.zip</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查找文件\"><a href=\"#查找文件\" class=\"headerlink\" title=\"查找文件\"></a>查找文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find  &quot;要搜索的文件加路径&quot; -name &quot;要查找的文件名(可以使用正则)&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h1><table>\n<thead>\n<tr>\n<th align=\"left\">动作</th>\n<th align=\"left\">快捷键</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">快速全屏或取消全屏（需要软件支持）</td>\n<td align=\"left\"><code>control</code> + <code>option</code> + <code>F</code></td>\n</tr>\n<tr>\n<td align=\"left\">跳到文本开头&#x2F;结尾（加 shift 可以选中）</td>\n<td align=\"left\"><code>command</code> + <code>左/右箭头</code></td>\n</tr>\n<tr>\n<td align=\"left\">跳到上一次词头&#x2F;词尾（加 shift 可以选中）</td>\n<td align=\"left\"><code>option</code> + <code>左/右箭头</code></td>\n</tr>\n<tr>\n<td align=\"left\">反向搜索命令行历史记录</td>\n<td align=\"left\"><code>control</code> + <code>R</code></td>\n</tr>\n<tr>\n<td align=\"left\">终端行清屏</td>\n<td align=\"left\"><code>command</code> + <code>K</code></td>\n</tr>\n<tr>\n<td align=\"left\">终端清除到上一命令</td>\n<td align=\"left\"><code>command</code> + <code>L</code></td>\n</tr>\n<tr>\n<td align=\"left\">左右切换桌面</td>\n<td align=\"left\"><code>control</code> + <code>左/右箭头</code></td>\n</tr>\n<tr>\n<td align=\"left\">新建窗口</td>\n<td align=\"left\"><code>command</code> + <code>N</code></td>\n</tr>\n<tr>\n<td align=\"left\">新建标签页</td>\n<td align=\"left\"><code>command</code> + <code>T</code></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><h3 id=\"以管理员身份查看占用指定端口进程\"><a href=\"#以管理员身份查看占用指定端口进程\" class=\"headerlink\" title=\"以管理员身份查看占用指定端口进程\"></a>以管理员身份查看占用指定端口进程</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo lsof -i:8888|grep LISTEN</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解压压缩包到指定目录\"><a href=\"#解压压缩包到指定目录\" class=\"headerlink\" title=\"解压压缩包到指定目录\"></a>解压压缩包到指定目录</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip -d /tmp test.zip</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查找文件\"><a href=\"#查找文件\" class=\"headerlink\" title=\"查找文件\"></a>查找文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find  &quot;要搜索的文件加路径&quot; -name &quot;要查找的文件名(可以使用正则)&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h1><table>\n<thead>\n<tr>\n<th align=\"left\">动作</th>\n<th align=\"left\">快捷键</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">快速全屏或取消全屏（需要软件支持）</td>\n<td align=\"left\"><code>control</code> + <code>option</code> + <code>F</code></td>\n</tr>\n<tr>\n<td align=\"left\">跳到文本开头&#x2F;结尾（加 shift 可以选中）</td>\n<td align=\"left\"><code>command</code> + <code>左/右箭头</code></td>\n</tr>\n<tr>\n<td align=\"left\">跳到上一次词头&#x2F;词尾（加 shift 可以选中）</td>\n<td align=\"left\"><code>option</code> + <code>左/右箭头</code></td>\n</tr>\n<tr>\n<td align=\"left\">反向搜索命令行历史记录</td>\n<td align=\"left\"><code>control</code> + <code>R</code></td>\n</tr>\n<tr>\n<td align=\"left\">终端行清屏</td>\n<td align=\"left\"><code>command</code> + <code>K</code></td>\n</tr>\n<tr>\n<td align=\"left\">终端清除到上一命令</td>\n<td align=\"left\"><code>command</code> + <code>L</code></td>\n</tr>\n<tr>\n<td align=\"left\">左右切换桌面</td>\n<td align=\"left\"><code>control</code> + <code>左/右箭头</code></td>\n</tr>\n<tr>\n<td align=\"left\">新建窗口</td>\n<td align=\"left\"><code>command</code> + <code>N</code></td>\n</tr>\n<tr>\n<td align=\"left\">新建标签页</td>\n<td align=\"left\"><code>command</code> + <code>T</code></td>\n</tr>\n</tbody></table>\n"},{"title":"Hexo常用命令","top_img":"http://tva1.sinaimg.cn/large/008lIB40ly1h3zth54jhuj32yo1o0nph.jpg","cover":"http://tva1.sinaimg.cn/large/008lIB40ly1h3zth54jhuj32yo1o0nph.jpg","abbrlink":"24caea6b","date":"2022-07-08T08:13:28.000Z","_content":"\n# Hexo常用命令\n\n### hexo init\n\n`hexo init` 用于初始化hexo， 新建文件夹做为网站的根目录\n\n```shell\nhexo init [folder]\n```\n\n- `floder` 为可选参数，用于指定初始化目录的路径，若无指定则默认为当前目录\n\n### hexo new\n\n`hexo new` 用于新建文章，同时也可以简写为 `hexo n`\n\n```shell\nhexo new [layout] <title>\n```\n\n- `alyout`  **可选参数**， 用于指定文章类型，若无指定则默认由配置文件中的default_layout选择决定（默认为post）\n- `title` **必填参数**，用于指定文章标题，如果参数值中含有空格，则需要使用双引号包围\n\n### hexo generate\n\n`hexo generate` 用于生成静态文件，一般可以简写为 `hexo g`\n\n```shell\nhexo generate\n```\n\n### hexo server\n\n`hexo server` 用于启动本地服务器，一般可以简写为 `hexo s`\n\n```shell\nhexo server\n```\n\n- `-port` 选填，指定服务器端口，默认为 4000，可简写为 `-p`\n- `-ip` 选填， 指定服务器IP地址，默认为 0.0.0.0， 可简写为`-i`\n- `-static`  选填，静态模式，仅提供public文件夹中的文件并禁用文件监视\n\n{% note warning no-icon %} 运行hexo依赖hexo-server插件 {% endnote %}\n\n```shell\nnpm install hexo-server --save\n```\n\n### hexo deploy\n\n`hexo deploy` 命令用于部署网站，一般可以简写为`hexo d`\n\n```shell\nhexo deploy\n```\n\n{% note warning no-icon %} 部署前需要填写_config.yml配置文件中的deploy {% endnote %}\n\n### hexo clean\n\n`hexo clean`用于清理缓存文件\n\n```shell\nhexo clean\n```\n\n# 总结\n\n命令之间可以使用`&&`链接，进行连续执行\n\n#### 例：\n\n1. 清理缓存 -> 2. 生成静态文件 -> 3. 开启本地服务\n\n```shell\nhexo clean && hexo g && hexo s\n```\n\n2. 清理缓存 -> 2. 生成静态文件 -> 3. 文件部署\n\n```shell\nhexo clean && hexo g && hexo d\n```\n\n","source":"_posts/Hexo常用命令.md","raw":"---\ntitle: Hexo常用命令\ntop_img: http://tva1.sinaimg.cn/large/008lIB40ly1h3zth54jhuj32yo1o0nph.jpg\ncover: http://tva1.sinaimg.cn/large/008lIB40ly1h3zth54jhuj32yo1o0nph.jpg\ntags: [blog, hexo]\ncategories: [python]\nabbrlink: 24caea6b\ndate: 2022-07-08 16:13:28\n---\n\n# Hexo常用命令\n\n### hexo init\n\n`hexo init` 用于初始化hexo， 新建文件夹做为网站的根目录\n\n```shell\nhexo init [folder]\n```\n\n- `floder` 为可选参数，用于指定初始化目录的路径，若无指定则默认为当前目录\n\n### hexo new\n\n`hexo new` 用于新建文章，同时也可以简写为 `hexo n`\n\n```shell\nhexo new [layout] <title>\n```\n\n- `alyout`  **可选参数**， 用于指定文章类型，若无指定则默认由配置文件中的default_layout选择决定（默认为post）\n- `title` **必填参数**，用于指定文章标题，如果参数值中含有空格，则需要使用双引号包围\n\n### hexo generate\n\n`hexo generate` 用于生成静态文件，一般可以简写为 `hexo g`\n\n```shell\nhexo generate\n```\n\n### hexo server\n\n`hexo server` 用于启动本地服务器，一般可以简写为 `hexo s`\n\n```shell\nhexo server\n```\n\n- `-port` 选填，指定服务器端口，默认为 4000，可简写为 `-p`\n- `-ip` 选填， 指定服务器IP地址，默认为 0.0.0.0， 可简写为`-i`\n- `-static`  选填，静态模式，仅提供public文件夹中的文件并禁用文件监视\n\n{% note warning no-icon %} 运行hexo依赖hexo-server插件 {% endnote %}\n\n```shell\nnpm install hexo-server --save\n```\n\n### hexo deploy\n\n`hexo deploy` 命令用于部署网站，一般可以简写为`hexo d`\n\n```shell\nhexo deploy\n```\n\n{% note warning no-icon %} 部署前需要填写_config.yml配置文件中的deploy {% endnote %}\n\n### hexo clean\n\n`hexo clean`用于清理缓存文件\n\n```shell\nhexo clean\n```\n\n# 总结\n\n命令之间可以使用`&&`链接，进行连续执行\n\n#### 例：\n\n1. 清理缓存 -> 2. 生成静态文件 -> 3. 开启本地服务\n\n```shell\nhexo clean && hexo g && hexo s\n```\n\n2. 清理缓存 -> 2. 生成静态文件 -> 3. 文件部署\n\n```shell\nhexo clean && hexo g && hexo d\n```\n\n","slug":"Hexo常用命令","published":1,"updated":"2022-07-31T14:11:01.563Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl71powxo000399uidz1u5832","content":"<h1 id=\"Hexo常用命令\"><a href=\"#Hexo常用命令\" class=\"headerlink\" title=\"Hexo常用命令\"></a>Hexo常用命令</h1><h3 id=\"hexo-init\"><a href=\"#hexo-init\" class=\"headerlink\" title=\"hexo init\"></a>hexo init</h3><p><code>hexo init</code> 用于初始化hexo， 新建文件夹做为网站的根目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init [folder]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>floder</code> 为可选参数，用于指定初始化目录的路径，若无指定则默认为当前目录</li>\n</ul>\n<h3 id=\"hexo-new\"><a href=\"#hexo-new\" class=\"headerlink\" title=\"hexo new\"></a>hexo new</h3><p><code>hexo new</code> 用于新建文章，同时也可以简写为 <code>hexo n</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>alyout</code>  <strong>可选参数</strong>， 用于指定文章类型，若无指定则默认由配置文件中的default_layout选择决定（默认为post）</li>\n<li><code>title</code> <strong>必填参数</strong>，用于指定文章标题，如果参数值中含有空格，则需要使用双引号包围</li>\n</ul>\n<h3 id=\"hexo-generate\"><a href=\"#hexo-generate\" class=\"headerlink\" title=\"hexo generate\"></a>hexo generate</h3><p><code>hexo generate</code> 用于生成静态文件，一般可以简写为 <code>hexo g</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hexo-server\"><a href=\"#hexo-server\" class=\"headerlink\" title=\"hexo server\"></a>hexo server</h3><p><code>hexo server</code> 用于启动本地服务器，一般可以简写为 <code>hexo s</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-port</code> 选填，指定服务器端口，默认为 4000，可简写为 <code>-p</code></li>\n<li><code>-ip</code> 选填， 指定服务器IP地址，默认为 0.0.0.0， 可简写为<code>-i</code></li>\n<li><code>-static</code>  选填，静态模式，仅提供public文件夹中的文件并禁用文件监视</li>\n</ul>\n<div class=\"note warning no-icon flat\"><p>运行hexo依赖hexo-server插件 </p>\n</div>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-server --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hexo-deploy\"><a href=\"#hexo-deploy\" class=\"headerlink\" title=\"hexo deploy\"></a>hexo deploy</h3><p><code>hexo deploy</code> 命令用于部署网站，一般可以简写为<code>hexo d</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n\n<div class=\"note warning no-icon flat\"><p>部署前需要填写_config.yml配置文件中的deploy </p>\n</div>\n\n<h3 id=\"hexo-clean\"><a href=\"#hexo-clean\" class=\"headerlink\" title=\"hexo clean\"></a>hexo clean</h3><p><code>hexo clean</code>用于清理缓存文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>命令之间可以使用<code>&amp;&amp;</code>链接，进行连续执行</p>\n<h4 id=\"例：\"><a href=\"#例：\" class=\"headerlink\" title=\"例：\"></a>例：</h4><ol>\n<li>清理缓存 -&gt; 2. 生成静态文件 -&gt; 3. 开启本地服务</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>清理缓存 -&gt; 2. 生成静态文件 -&gt; 3. 文件部署</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Hexo常用命令\"><a href=\"#Hexo常用命令\" class=\"headerlink\" title=\"Hexo常用命令\"></a>Hexo常用命令</h1><h3 id=\"hexo-init\"><a href=\"#hexo-init\" class=\"headerlink\" title=\"hexo init\"></a>hexo init</h3><p><code>hexo init</code> 用于初始化hexo， 新建文件夹做为网站的根目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init [folder]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>floder</code> 为可选参数，用于指定初始化目录的路径，若无指定则默认为当前目录</li>\n</ul>\n<h3 id=\"hexo-new\"><a href=\"#hexo-new\" class=\"headerlink\" title=\"hexo new\"></a>hexo new</h3><p><code>hexo new</code> 用于新建文章，同时也可以简写为 <code>hexo n</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>alyout</code>  <strong>可选参数</strong>， 用于指定文章类型，若无指定则默认由配置文件中的default_layout选择决定（默认为post）</li>\n<li><code>title</code> <strong>必填参数</strong>，用于指定文章标题，如果参数值中含有空格，则需要使用双引号包围</li>\n</ul>\n<h3 id=\"hexo-generate\"><a href=\"#hexo-generate\" class=\"headerlink\" title=\"hexo generate\"></a>hexo generate</h3><p><code>hexo generate</code> 用于生成静态文件，一般可以简写为 <code>hexo g</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hexo-server\"><a href=\"#hexo-server\" class=\"headerlink\" title=\"hexo server\"></a>hexo server</h3><p><code>hexo server</code> 用于启动本地服务器，一般可以简写为 <code>hexo s</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-port</code> 选填，指定服务器端口，默认为 4000，可简写为 <code>-p</code></li>\n<li><code>-ip</code> 选填， 指定服务器IP地址，默认为 0.0.0.0， 可简写为<code>-i</code></li>\n<li><code>-static</code>  选填，静态模式，仅提供public文件夹中的文件并禁用文件监视</li>\n</ul>\n<div class=\"note warning no-icon flat\"><p>运行hexo依赖hexo-server插件 </p>\n</div>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-server --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hexo-deploy\"><a href=\"#hexo-deploy\" class=\"headerlink\" title=\"hexo deploy\"></a>hexo deploy</h3><p><code>hexo deploy</code> 命令用于部署网站，一般可以简写为<code>hexo d</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n\n<div class=\"note warning no-icon flat\"><p>部署前需要填写_config.yml配置文件中的deploy </p>\n</div>\n\n<h3 id=\"hexo-clean\"><a href=\"#hexo-clean\" class=\"headerlink\" title=\"hexo clean\"></a>hexo clean</h3><p><code>hexo clean</code>用于清理缓存文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>命令之间可以使用<code>&amp;&amp;</code>链接，进行连续执行</p>\n<h4 id=\"例：\"><a href=\"#例：\" class=\"headerlink\" title=\"例：\"></a>例：</h4><ol>\n<li>清理缓存 -&gt; 2. 生成静态文件 -&gt; 3. 开启本地服务</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>清理缓存 -&gt; 2. 生成静态文件 -&gt; 3. 文件部署</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>\n\n"},{"title":"安卓逆向案例（一）：某某新闻逆向","top_img":"http://tva1.sinaimg.cn/large/008lIB40ly1h5d16pdvf2j31hc117b2a.jpg","cover":"http://tva1.sinaimg.cn/large/008lIB40ly1h5d16pdvf2j31hc117b2a.jpg","abbrlink":"d5cccb14","date":"2022-08-20T02:38:29.000Z","_content":"\n## 接口分析\n\n首先尝试对该新闻搜索接口进行抓包，并分析接口。这里使用的一加手机（Android 10），抓包软件为HttpCanary，软件版本为7.6.2，软件运行与抓包结果如下图所示\n\n![image.png](http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d1olx9cyj31kw17qtsx.jpg)\n\n分析结果部分如下：\n\n- 接口：https://news.dingxinwen.com/api/search/list\n- wd为搜索关键词\n- 加密参数：sign\n- tab为导航栏栏目标签\n- timestamp明显为时间戳\n- app_id为固定值， 应该是版本信息\n- page为页码，size是单页数据量\n\n尝试修改关键词，或者页码再次请求后，返回下图内容，说明sign的生成方式和wd，page与size有关系\n\n![image.png](http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d1wodl1kj30w201g3yu.jpg)\n\n## 源码静态分析\n\n接下来需要反编译APK，在源码中观察代码进行静态分析。应该先对apk进行查壳并脱壳，但由于特殊情况，暂时跳过这部分，直接使用jadx-gui来反编译。所幸该apk并没有加壳。在jadx中全局搜索`sign`后看到结果特别多，这样并不利于分析。\n\n![image.png](http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d2x3eh7vj318g0rs7js.jpg)\n\n接着我们可以尝试在sign左右两边添加双引号来缩小范围，看到数据量已经明显减少，并且有一行有着我们的老朋友：md5字样，肯定要和他叙叙旧，我们先双击点进去看一下\n\n![image.png](http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d3i7w04yj318g0rsh0e.jpg)\n\n进去之后我们也可以看到一些接口中出现的字样，仔细分析这一段内容，`sortedMap`是一个排序后的Map，查了一下`toSortedMap`是按照KEY值升序排序，所以后面处理的时候要注意排序规则。\n\n![image.png](http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d3bvd2ejj315c0x8ha5.jpg)\n\n`str4`向上慢慢找可以发现是个固定值：`=`\n\n红框处代码大意：从已经排好序的`sortedMap`中循环取出`KEY`和`VALUE`遍历到`sb`中，`KEY`和`VALUE`使用`=`进行拼接，然后把`DomainServiceHelperKt.getCurrentAppSecret()`添加进去，最后做`MD5`加密\n\n查看`DomainServiceHelperKt.getCurrentAppSecret()`发现是定值\n\n![image.png](http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d5ltzag7j30to00yjso.jpg)\n\n已知`shortedMap`是通过`hashMap2`进行`toSortdeMap`排序后返回的。而`hashMap2`中分别`put`了`app_id`，`timestamp`，以及请求时`Request`对象中的一些参数。\n\n所以得出`sign`值生成流程，先提取参数构建`Map`，然后进行排序并转换成字符串以`=`拼接，再和`app_secret`组合后进行MD5加密。\n\n静态分析到这里就够了，我们也得出了计算`sign`值的流程，但是为了结果的准确性，我们还是使用`Frida`进行`Hook`一下，进行结果确认和调试分析。\n\n## Frida动态分析\n\n通过`Firda`来`Hook`参数，验证静态分析结果是否正确。\n\n先启动移动设备，然后启动`Frida-server`，如下图\n\n![image.png](http://tva1.sinaimg.cn/mw690/008lIB40ly1h5dcjtf7rrj30hg04k750.jpg)\n\n接下来开始选择`Hook`点，根据静态分析可以发现直接`Hook`类中的`Md5`方法，即可查看`sign`生成前的入参，需要注意的是`Md5`方法是成员方法，所以`Hook`时要进行视力话，加上`$new()`。\n\nPython代码如下：\n\n```python\n# -*- coding: utf-8 -*-\n# @Time     : 2022/8/19  13:58\n# @Author   : Eamonn\n# @Mail     : china.eamonn@gmail.com\n# @File     : frida_test.py\nimport time\n\nimport frida\n\ndevice = frida.get_usb_device()\npid = device.spawn([\"cn.dahebao\"])\ndevice.resume(pid)\ntime.sleep(1)  # Without it Java.perform silently fails\nsession = device.attach(pid)\nwith open(\"hook_js.js\") as f:\n    script = session.create_script(f.read())\nscript.load()\n\n# prevent the python script from terminating\ninput()\n\n```\n\nJavaScript代码如下：\n\n```javascript\nJava.perform(\n    function () {\n        console.log(\"1. start hook\");\n        var ba = Java.use(\"com.dingduan.lib_network.interceptor.CommonParamInterceptor\").$new();\n        if (ba != undefined) {\n            console.log(\"2. find class\");\n            ba.md5.implementation = function (a1) {\n                console.log(\"3. find function\");\n                console.log(a1);\n                var res = ba.md5(a1);\n                console.log(\"计算Sign:\" + res);\n                return res;\n            }\n        }\n    }\n)\n```\n\n打印结果如下：\n\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h5dd108t4rj322i06ktav.jpg)\n\n我们可以先将这串参数用在线`MD5`加密后和生成的`sign`进行对比，看看源码中是否时普通的`MD5`加密，对比过程这里省略，最后发现结果是一致的，那么通过`Frida`动态调试验证了我们静态分析的结论是没有问题的。\n\n## 加密还原\n\n根据静态和动态分析的结果来看，`sign`的生成规则就是把`URL`中的参数`Params`按照KEY值排序，然后转位字符串并用等号拼接，最后加上固定值`app_secret`进行MD5加密。\n\nPython还原代码如下：\n\n```python\n# -*- coding: utf-8 -*-\n# @Time     : 2022/8/19  13:35\n# @Author   : Eamonn\n# @Mail     : china.eamonn@gmail.com\n# @File     : test_requests.py\nimport requests\nimport time\nfrom eamonn import eamonn\n\ntime_stamp = str(round(time.time()))   # 时间戳\napp_secret = 'b80a5dfbe4f0637ae3179a06fdb5bd3c'   # app_secret固定值\n\nitem = {'page': '1',\n        'size': '20',\n        'tab': '1',\n        'wd': '迪丽热巴',\n        'app_id': '220525165346815301',\n        'appCurrentVersion': '7.6.2',\n        'platformPublic': 'Android',\n        'phoneModel': 'OnePlus ONEPLUSA6000',\n        'systemOS': '10',\n        'timestamp': time_stamp,\n        'channelPackage': 'pro'}\n\nparams = sorted(item.items(), key=lambda x: x[0])   # 根据key值对item进行排序\n\nsb = ''\nfor p in params:\n    sb += f'{p[0]}={p[1]}'   # 循环排序好的item，进行字符串拼接 \n\nsign = eamonn.md5(sb + app_secret)   # 最后添加固定值，并进行md5\nitem['sign'] = sign\nprint(sign)\nurl = f'https://news.dingxinwen.com/api/search/list'\nheaders = {\n    \"Host\": \"news.dingxinwen.com\",\n    \"Connection\": \"Keep-Alive\",\n    \"Accept-Encoding\": \"gzip\",\n    \"User-Agent\": \"okhttp/4.9.1\"\n}\n\nresponse = requests.get(url, headers=headers, params=item)\nprint(response.json())\n\n```\n\n经测试在运行程序后会成功返回数据。\n","source":"_posts/安卓逆向案例（一）：某某新闻逆向.md","raw":"---\ntitle: 安卓逆向案例（一）：某某新闻逆向\ntags: '安卓逆向'\ntop_img: 'http://tva1.sinaimg.cn/large/008lIB40ly1h5d16pdvf2j31hc117b2a.jpg'\ncover: 'http://tva1.sinaimg.cn/large/008lIB40ly1h5d16pdvf2j31hc117b2a.jpg'\nabbrlink: d5cccb14\ndate: 2022-08-20 10:38:29\n---\n\n## 接口分析\n\n首先尝试对该新闻搜索接口进行抓包，并分析接口。这里使用的一加手机（Android 10），抓包软件为HttpCanary，软件版本为7.6.2，软件运行与抓包结果如下图所示\n\n![image.png](http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d1olx9cyj31kw17qtsx.jpg)\n\n分析结果部分如下：\n\n- 接口：https://news.dingxinwen.com/api/search/list\n- wd为搜索关键词\n- 加密参数：sign\n- tab为导航栏栏目标签\n- timestamp明显为时间戳\n- app_id为固定值， 应该是版本信息\n- page为页码，size是单页数据量\n\n尝试修改关键词，或者页码再次请求后，返回下图内容，说明sign的生成方式和wd，page与size有关系\n\n![image.png](http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d1wodl1kj30w201g3yu.jpg)\n\n## 源码静态分析\n\n接下来需要反编译APK，在源码中观察代码进行静态分析。应该先对apk进行查壳并脱壳，但由于特殊情况，暂时跳过这部分，直接使用jadx-gui来反编译。所幸该apk并没有加壳。在jadx中全局搜索`sign`后看到结果特别多，这样并不利于分析。\n\n![image.png](http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d2x3eh7vj318g0rs7js.jpg)\n\n接着我们可以尝试在sign左右两边添加双引号来缩小范围，看到数据量已经明显减少，并且有一行有着我们的老朋友：md5字样，肯定要和他叙叙旧，我们先双击点进去看一下\n\n![image.png](http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d3i7w04yj318g0rsh0e.jpg)\n\n进去之后我们也可以看到一些接口中出现的字样，仔细分析这一段内容，`sortedMap`是一个排序后的Map，查了一下`toSortedMap`是按照KEY值升序排序，所以后面处理的时候要注意排序规则。\n\n![image.png](http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d3bvd2ejj315c0x8ha5.jpg)\n\n`str4`向上慢慢找可以发现是个固定值：`=`\n\n红框处代码大意：从已经排好序的`sortedMap`中循环取出`KEY`和`VALUE`遍历到`sb`中，`KEY`和`VALUE`使用`=`进行拼接，然后把`DomainServiceHelperKt.getCurrentAppSecret()`添加进去，最后做`MD5`加密\n\n查看`DomainServiceHelperKt.getCurrentAppSecret()`发现是定值\n\n![image.png](http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d5ltzag7j30to00yjso.jpg)\n\n已知`shortedMap`是通过`hashMap2`进行`toSortdeMap`排序后返回的。而`hashMap2`中分别`put`了`app_id`，`timestamp`，以及请求时`Request`对象中的一些参数。\n\n所以得出`sign`值生成流程，先提取参数构建`Map`，然后进行排序并转换成字符串以`=`拼接，再和`app_secret`组合后进行MD5加密。\n\n静态分析到这里就够了，我们也得出了计算`sign`值的流程，但是为了结果的准确性，我们还是使用`Frida`进行`Hook`一下，进行结果确认和调试分析。\n\n## Frida动态分析\n\n通过`Firda`来`Hook`参数，验证静态分析结果是否正确。\n\n先启动移动设备，然后启动`Frida-server`，如下图\n\n![image.png](http://tva1.sinaimg.cn/mw690/008lIB40ly1h5dcjtf7rrj30hg04k750.jpg)\n\n接下来开始选择`Hook`点，根据静态分析可以发现直接`Hook`类中的`Md5`方法，即可查看`sign`生成前的入参，需要注意的是`Md5`方法是成员方法，所以`Hook`时要进行视力话，加上`$new()`。\n\nPython代码如下：\n\n```python\n# -*- coding: utf-8 -*-\n# @Time     : 2022/8/19  13:58\n# @Author   : Eamonn\n# @Mail     : china.eamonn@gmail.com\n# @File     : frida_test.py\nimport time\n\nimport frida\n\ndevice = frida.get_usb_device()\npid = device.spawn([\"cn.dahebao\"])\ndevice.resume(pid)\ntime.sleep(1)  # Without it Java.perform silently fails\nsession = device.attach(pid)\nwith open(\"hook_js.js\") as f:\n    script = session.create_script(f.read())\nscript.load()\n\n# prevent the python script from terminating\ninput()\n\n```\n\nJavaScript代码如下：\n\n```javascript\nJava.perform(\n    function () {\n        console.log(\"1. start hook\");\n        var ba = Java.use(\"com.dingduan.lib_network.interceptor.CommonParamInterceptor\").$new();\n        if (ba != undefined) {\n            console.log(\"2. find class\");\n            ba.md5.implementation = function (a1) {\n                console.log(\"3. find function\");\n                console.log(a1);\n                var res = ba.md5(a1);\n                console.log(\"计算Sign:\" + res);\n                return res;\n            }\n        }\n    }\n)\n```\n\n打印结果如下：\n\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h5dd108t4rj322i06ktav.jpg)\n\n我们可以先将这串参数用在线`MD5`加密后和生成的`sign`进行对比，看看源码中是否时普通的`MD5`加密，对比过程这里省略，最后发现结果是一致的，那么通过`Frida`动态调试验证了我们静态分析的结论是没有问题的。\n\n## 加密还原\n\n根据静态和动态分析的结果来看，`sign`的生成规则就是把`URL`中的参数`Params`按照KEY值排序，然后转位字符串并用等号拼接，最后加上固定值`app_secret`进行MD5加密。\n\nPython还原代码如下：\n\n```python\n# -*- coding: utf-8 -*-\n# @Time     : 2022/8/19  13:35\n# @Author   : Eamonn\n# @Mail     : china.eamonn@gmail.com\n# @File     : test_requests.py\nimport requests\nimport time\nfrom eamonn import eamonn\n\ntime_stamp = str(round(time.time()))   # 时间戳\napp_secret = 'b80a5dfbe4f0637ae3179a06fdb5bd3c'   # app_secret固定值\n\nitem = {'page': '1',\n        'size': '20',\n        'tab': '1',\n        'wd': '迪丽热巴',\n        'app_id': '220525165346815301',\n        'appCurrentVersion': '7.6.2',\n        'platformPublic': 'Android',\n        'phoneModel': 'OnePlus ONEPLUSA6000',\n        'systemOS': '10',\n        'timestamp': time_stamp,\n        'channelPackage': 'pro'}\n\nparams = sorted(item.items(), key=lambda x: x[0])   # 根据key值对item进行排序\n\nsb = ''\nfor p in params:\n    sb += f'{p[0]}={p[1]}'   # 循环排序好的item，进行字符串拼接 \n\nsign = eamonn.md5(sb + app_secret)   # 最后添加固定值，并进行md5\nitem['sign'] = sign\nprint(sign)\nurl = f'https://news.dingxinwen.com/api/search/list'\nheaders = {\n    \"Host\": \"news.dingxinwen.com\",\n    \"Connection\": \"Keep-Alive\",\n    \"Accept-Encoding\": \"gzip\",\n    \"User-Agent\": \"okhttp/4.9.1\"\n}\n\nresponse = requests.get(url, headers=headers, params=item)\nprint(response.json())\n\n```\n\n经测试在运行程序后会成功返回数据。\n","slug":"安卓逆向案例（一）：某某新闻逆向","published":1,"updated":"2022-08-20T09:41:21.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl71powxq000599ui9ej8dzft","content":"<h2 id=\"接口分析\"><a href=\"#接口分析\" class=\"headerlink\" title=\"接口分析\"></a>接口分析</h2><p>首先尝试对该新闻搜索接口进行抓包，并分析接口。这里使用的一加手机（Android 10），抓包软件为HttpCanary，软件版本为7.6.2，软件运行与抓包结果如下图所示</p>\n<p><img src=\"http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d1olx9cyj31kw17qtsx.jpg\" alt=\"image.png\"></p>\n<p>分析结果部分如下：</p>\n<ul>\n<li>接口：<a href=\"https://news.dingxinwen.com/api/search/list\">https://news.dingxinwen.com/api/search/list</a></li>\n<li>wd为搜索关键词</li>\n<li>加密参数：sign</li>\n<li>tab为导航栏栏目标签</li>\n<li>timestamp明显为时间戳</li>\n<li>app_id为固定值， 应该是版本信息</li>\n<li>page为页码，size是单页数据量</li>\n</ul>\n<p>尝试修改关键词，或者页码再次请求后，返回下图内容，说明sign的生成方式和wd，page与size有关系</p>\n<p><img src=\"http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d1wodl1kj30w201g3yu.jpg\" alt=\"image.png\"></p>\n<h2 id=\"源码静态分析\"><a href=\"#源码静态分析\" class=\"headerlink\" title=\"源码静态分析\"></a>源码静态分析</h2><p>接下来需要反编译APK，在源码中观察代码进行静态分析。应该先对apk进行查壳并脱壳，但由于特殊情况，暂时跳过这部分，直接使用jadx-gui来反编译。所幸该apk并没有加壳。在jadx中全局搜索<code>sign</code>后看到结果特别多，这样并不利于分析。</p>\n<p><img src=\"http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d2x3eh7vj318g0rs7js.jpg\" alt=\"image.png\"></p>\n<p>接着我们可以尝试在sign左右两边添加双引号来缩小范围，看到数据量已经明显减少，并且有一行有着我们的老朋友：md5字样，肯定要和他叙叙旧，我们先双击点进去看一下</p>\n<p><img src=\"http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d3i7w04yj318g0rsh0e.jpg\" alt=\"image.png\"></p>\n<p>进去之后我们也可以看到一些接口中出现的字样，仔细分析这一段内容，<code>sortedMap</code>是一个排序后的Map，查了一下<code>toSortedMap</code>是按照KEY值升序排序，所以后面处理的时候要注意排序规则。</p>\n<p><img src=\"http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d3bvd2ejj315c0x8ha5.jpg\" alt=\"image.png\"></p>\n<p><code>str4</code>向上慢慢找可以发现是个固定值：<code>=</code></p>\n<p>红框处代码大意：从已经排好序的<code>sortedMap</code>中循环取出<code>KEY</code>和<code>VALUE</code>遍历到<code>sb</code>中，<code>KEY</code>和<code>VALUE</code>使用<code>=</code>进行拼接，然后把<code>DomainServiceHelperKt.getCurrentAppSecret()</code>添加进去，最后做<code>MD5</code>加密</p>\n<p>查看<code>DomainServiceHelperKt.getCurrentAppSecret()</code>发现是定值</p>\n<p><img src=\"http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d5ltzag7j30to00yjso.jpg\" alt=\"image.png\"></p>\n<p>已知<code>shortedMap</code>是通过<code>hashMap2</code>进行<code>toSortdeMap</code>排序后返回的。而<code>hashMap2</code>中分别<code>put</code>了<code>app_id</code>，<code>timestamp</code>，以及请求时<code>Request</code>对象中的一些参数。</p>\n<p>所以得出<code>sign</code>值生成流程，先提取参数构建<code>Map</code>，然后进行排序并转换成字符串以<code>=</code>拼接，再和<code>app_secret</code>组合后进行MD5加密。</p>\n<p>静态分析到这里就够了，我们也得出了计算<code>sign</code>值的流程，但是为了结果的准确性，我们还是使用<code>Frida</code>进行<code>Hook</code>一下，进行结果确认和调试分析。</p>\n<h2 id=\"Frida动态分析\"><a href=\"#Frida动态分析\" class=\"headerlink\" title=\"Frida动态分析\"></a>Frida动态分析</h2><p>通过<code>Firda</code>来<code>Hook</code>参数，验证静态分析结果是否正确。</p>\n<p>先启动移动设备，然后启动<code>Frida-server</code>，如下图</p>\n<p><img src=\"http://tva1.sinaimg.cn/mw690/008lIB40ly1h5dcjtf7rrj30hg04k750.jpg\" alt=\"image.png\"></p>\n<p>接下来开始选择<code>Hook</code>点，根据静态分析可以发现直接<code>Hook</code>类中的<code>Md5</code>方法，即可查看<code>sign</code>生成前的入参，需要注意的是<code>Md5</code>方法是成员方法，所以<code>Hook</code>时要进行视力话，加上<code>$new()</code>。</p>\n<p>Python代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># @Time     : 2022/8/19  13:58</span></span><br><span class=\"line\"><span class=\"comment\"># @Author   : Eamonn</span></span><br><span class=\"line\"><span class=\"comment\"># @Mail     : china.eamonn@gmail.com</span></span><br><span class=\"line\"><span class=\"comment\"># @File     : frida_test.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> frida</span><br><span class=\"line\"></span><br><span class=\"line\">device = frida.get_usb_device()</span><br><span class=\"line\">pid = device.spawn([<span class=\"string\">&quot;cn.dahebao&quot;</span>])</span><br><span class=\"line\">device.resume(pid)</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)  <span class=\"comment\"># Without it Java.perform silently fails</span></span><br><span class=\"line\">session = device.attach(pid)</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;hook_js.js&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    script = session.create_script(f.read())</span><br><span class=\"line\">script.load()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># prevent the python script from terminating</span></span><br><span class=\"line\"><span class=\"built_in\">input</span>()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>JavaScript代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Java</span>.<span class=\"title function_\">perform</span>(</span><br><span class=\"line\">    <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;1. start hook&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ba = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;com.dingduan.lib_network.interceptor.CommonParamInterceptor&quot;</span>).$new();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ba != <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;2. find class&quot;</span>);</span><br><span class=\"line\">            ba.<span class=\"property\">md5</span>.<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span> (<span class=\"params\">a1</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;3. find function&quot;</span>);</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a1);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> res = ba.<span class=\"title function_\">md5</span>(a1);</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;计算Sign:&quot;</span> + res);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>打印结果如下：</p>\n<p><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h5dd108t4rj322i06ktav.jpg\" alt=\"image.png\"></p>\n<p>我们可以先将这串参数用在线<code>MD5</code>加密后和生成的<code>sign</code>进行对比，看看源码中是否时普通的<code>MD5</code>加密，对比过程这里省略，最后发现结果是一致的，那么通过<code>Frida</code>动态调试验证了我们静态分析的结论是没有问题的。</p>\n<h2 id=\"加密还原\"><a href=\"#加密还原\" class=\"headerlink\" title=\"加密还原\"></a>加密还原</h2><p>根据静态和动态分析的结果来看，<code>sign</code>的生成规则就是把<code>URL</code>中的参数<code>Params</code>按照KEY值排序，然后转位字符串并用等号拼接，最后加上固定值<code>app_secret</code>进行MD5加密。</p>\n<p>Python还原代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># @Time     : 2022/8/19  13:35</span></span><br><span class=\"line\"><span class=\"comment\"># @Author   : Eamonn</span></span><br><span class=\"line\"><span class=\"comment\"># @Mail     : china.eamonn@gmail.com</span></span><br><span class=\"line\"><span class=\"comment\"># @File     : test_requests.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> eamonn <span class=\"keyword\">import</span> eamonn</span><br><span class=\"line\"></span><br><span class=\"line\">time_stamp = <span class=\"built_in\">str</span>(<span class=\"built_in\">round</span>(time.time()))   <span class=\"comment\"># 时间戳</span></span><br><span class=\"line\">app_secret = <span class=\"string\">&#x27;b80a5dfbe4f0637ae3179a06fdb5bd3c&#x27;</span>   <span class=\"comment\"># app_secret固定值</span></span><br><span class=\"line\"></span><br><span class=\"line\">item = &#123;<span class=\"string\">&#x27;page&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;size&#x27;</span>: <span class=\"string\">&#x27;20&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;tab&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;wd&#x27;</span>: <span class=\"string\">&#x27;迪丽热巴&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;app_id&#x27;</span>: <span class=\"string\">&#x27;220525165346815301&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;appCurrentVersion&#x27;</span>: <span class=\"string\">&#x27;7.6.2&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;platformPublic&#x27;</span>: <span class=\"string\">&#x27;Android&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;phoneModel&#x27;</span>: <span class=\"string\">&#x27;OnePlus ONEPLUSA6000&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;systemOS&#x27;</span>: <span class=\"string\">&#x27;10&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;timestamp&#x27;</span>: time_stamp,</span><br><span class=\"line\">        <span class=\"string\">&#x27;channelPackage&#x27;</span>: <span class=\"string\">&#x27;pro&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">params = <span class=\"built_in\">sorted</span>(item.items(), key=<span class=\"keyword\">lambda</span> x: x[<span class=\"number\">0</span>])   <span class=\"comment\"># 根据key值对item进行排序</span></span><br><span class=\"line\"></span><br><span class=\"line\">sb = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> params:</span><br><span class=\"line\">    sb += <span class=\"string\">f&#x27;<span class=\"subst\">&#123;p[<span class=\"number\">0</span>]&#125;</span>=<span class=\"subst\">&#123;p[<span class=\"number\">1</span>]&#125;</span>&#x27;</span>   <span class=\"comment\"># 循环排序好的item，进行字符串拼接 </span></span><br><span class=\"line\"></span><br><span class=\"line\">sign = eamonn.md5(sb + app_secret)   <span class=\"comment\"># 最后添加固定值，并进行md5</span></span><br><span class=\"line\">item[<span class=\"string\">&#x27;sign&#x27;</span>] = sign</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sign)</span><br><span class=\"line\">url = <span class=\"string\">f&#x27;https://news.dingxinwen.com/api/search/list&#x27;</span></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Host&quot;</span>: <span class=\"string\">&quot;news.dingxinwen.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Connection&quot;</span>: <span class=\"string\">&quot;Keep-Alive&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Accept-Encoding&quot;</span>: <span class=\"string\">&quot;gzip&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;okhttp/4.9.1&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(url, headers=headers, params=item)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.json())</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>经测试在运行程序后会成功返回数据。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"接口分析\"><a href=\"#接口分析\" class=\"headerlink\" title=\"接口分析\"></a>接口分析</h2><p>首先尝试对该新闻搜索接口进行抓包，并分析接口。这里使用的一加手机（Android 10），抓包软件为HttpCanary，软件版本为7.6.2，软件运行与抓包结果如下图所示</p>\n<p><img src=\"http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d1olx9cyj31kw17qtsx.jpg\" alt=\"image.png\"></p>\n<p>分析结果部分如下：</p>\n<ul>\n<li>接口：<a href=\"https://news.dingxinwen.com/api/search/list\">https://news.dingxinwen.com/api/search/list</a></li>\n<li>wd为搜索关键词</li>\n<li>加密参数：sign</li>\n<li>tab为导航栏栏目标签</li>\n<li>timestamp明显为时间戳</li>\n<li>app_id为固定值， 应该是版本信息</li>\n<li>page为页码，size是单页数据量</li>\n</ul>\n<p>尝试修改关键词，或者页码再次请求后，返回下图内容，说明sign的生成方式和wd，page与size有关系</p>\n<p><img src=\"http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d1wodl1kj30w201g3yu.jpg\" alt=\"image.png\"></p>\n<h2 id=\"源码静态分析\"><a href=\"#源码静态分析\" class=\"headerlink\" title=\"源码静态分析\"></a>源码静态分析</h2><p>接下来需要反编译APK，在源码中观察代码进行静态分析。应该先对apk进行查壳并脱壳，但由于特殊情况，暂时跳过这部分，直接使用jadx-gui来反编译。所幸该apk并没有加壳。在jadx中全局搜索<code>sign</code>后看到结果特别多，这样并不利于分析。</p>\n<p><img src=\"http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d2x3eh7vj318g0rs7js.jpg\" alt=\"image.png\"></p>\n<p>接着我们可以尝试在sign左右两边添加双引号来缩小范围，看到数据量已经明显减少，并且有一行有着我们的老朋友：md5字样，肯定要和他叙叙旧，我们先双击点进去看一下</p>\n<p><img src=\"http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d3i7w04yj318g0rsh0e.jpg\" alt=\"image.png\"></p>\n<p>进去之后我们也可以看到一些接口中出现的字样，仔细分析这一段内容，<code>sortedMap</code>是一个排序后的Map，查了一下<code>toSortedMap</code>是按照KEY值升序排序，所以后面处理的时候要注意排序规则。</p>\n<p><img src=\"http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d3bvd2ejj315c0x8ha5.jpg\" alt=\"image.png\"></p>\n<p><code>str4</code>向上慢慢找可以发现是个固定值：<code>=</code></p>\n<p>红框处代码大意：从已经排好序的<code>sortedMap</code>中循环取出<code>KEY</code>和<code>VALUE</code>遍历到<code>sb</code>中，<code>KEY</code>和<code>VALUE</code>使用<code>=</code>进行拼接，然后把<code>DomainServiceHelperKt.getCurrentAppSecret()</code>添加进去，最后做<code>MD5</code>加密</p>\n<p>查看<code>DomainServiceHelperKt.getCurrentAppSecret()</code>发现是定值</p>\n<p><img src=\"http://tva1.sinaimg.cn/mw690/008lIB40ly1h5d5ltzag7j30to00yjso.jpg\" alt=\"image.png\"></p>\n<p>已知<code>shortedMap</code>是通过<code>hashMap2</code>进行<code>toSortdeMap</code>排序后返回的。而<code>hashMap2</code>中分别<code>put</code>了<code>app_id</code>，<code>timestamp</code>，以及请求时<code>Request</code>对象中的一些参数。</p>\n<p>所以得出<code>sign</code>值生成流程，先提取参数构建<code>Map</code>，然后进行排序并转换成字符串以<code>=</code>拼接，再和<code>app_secret</code>组合后进行MD5加密。</p>\n<p>静态分析到这里就够了，我们也得出了计算<code>sign</code>值的流程，但是为了结果的准确性，我们还是使用<code>Frida</code>进行<code>Hook</code>一下，进行结果确认和调试分析。</p>\n<h2 id=\"Frida动态分析\"><a href=\"#Frida动态分析\" class=\"headerlink\" title=\"Frida动态分析\"></a>Frida动态分析</h2><p>通过<code>Firda</code>来<code>Hook</code>参数，验证静态分析结果是否正确。</p>\n<p>先启动移动设备，然后启动<code>Frida-server</code>，如下图</p>\n<p><img src=\"http://tva1.sinaimg.cn/mw690/008lIB40ly1h5dcjtf7rrj30hg04k750.jpg\" alt=\"image.png\"></p>\n<p>接下来开始选择<code>Hook</code>点，根据静态分析可以发现直接<code>Hook</code>类中的<code>Md5</code>方法，即可查看<code>sign</code>生成前的入参，需要注意的是<code>Md5</code>方法是成员方法，所以<code>Hook</code>时要进行视力话，加上<code>$new()</code>。</p>\n<p>Python代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># @Time     : 2022/8/19  13:58</span></span><br><span class=\"line\"><span class=\"comment\"># @Author   : Eamonn</span></span><br><span class=\"line\"><span class=\"comment\"># @Mail     : china.eamonn@gmail.com</span></span><br><span class=\"line\"><span class=\"comment\"># @File     : frida_test.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> frida</span><br><span class=\"line\"></span><br><span class=\"line\">device = frida.get_usb_device()</span><br><span class=\"line\">pid = device.spawn([<span class=\"string\">&quot;cn.dahebao&quot;</span>])</span><br><span class=\"line\">device.resume(pid)</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)  <span class=\"comment\"># Without it Java.perform silently fails</span></span><br><span class=\"line\">session = device.attach(pid)</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;hook_js.js&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    script = session.create_script(f.read())</span><br><span class=\"line\">script.load()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># prevent the python script from terminating</span></span><br><span class=\"line\"><span class=\"built_in\">input</span>()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>JavaScript代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Java</span>.<span class=\"title function_\">perform</span>(</span><br><span class=\"line\">    <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;1. start hook&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ba = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;com.dingduan.lib_network.interceptor.CommonParamInterceptor&quot;</span>).$new();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ba != <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;2. find class&quot;</span>);</span><br><span class=\"line\">            ba.<span class=\"property\">md5</span>.<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span> (<span class=\"params\">a1</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;3. find function&quot;</span>);</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a1);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> res = ba.<span class=\"title function_\">md5</span>(a1);</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;计算Sign:&quot;</span> + res);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>打印结果如下：</p>\n<p><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h5dd108t4rj322i06ktav.jpg\" alt=\"image.png\"></p>\n<p>我们可以先将这串参数用在线<code>MD5</code>加密后和生成的<code>sign</code>进行对比，看看源码中是否时普通的<code>MD5</code>加密，对比过程这里省略，最后发现结果是一致的，那么通过<code>Frida</code>动态调试验证了我们静态分析的结论是没有问题的。</p>\n<h2 id=\"加密还原\"><a href=\"#加密还原\" class=\"headerlink\" title=\"加密还原\"></a>加密还原</h2><p>根据静态和动态分析的结果来看，<code>sign</code>的生成规则就是把<code>URL</code>中的参数<code>Params</code>按照KEY值排序，然后转位字符串并用等号拼接，最后加上固定值<code>app_secret</code>进行MD5加密。</p>\n<p>Python还原代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># @Time     : 2022/8/19  13:35</span></span><br><span class=\"line\"><span class=\"comment\"># @Author   : Eamonn</span></span><br><span class=\"line\"><span class=\"comment\"># @Mail     : china.eamonn@gmail.com</span></span><br><span class=\"line\"><span class=\"comment\"># @File     : test_requests.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> eamonn <span class=\"keyword\">import</span> eamonn</span><br><span class=\"line\"></span><br><span class=\"line\">time_stamp = <span class=\"built_in\">str</span>(<span class=\"built_in\">round</span>(time.time()))   <span class=\"comment\"># 时间戳</span></span><br><span class=\"line\">app_secret = <span class=\"string\">&#x27;b80a5dfbe4f0637ae3179a06fdb5bd3c&#x27;</span>   <span class=\"comment\"># app_secret固定值</span></span><br><span class=\"line\"></span><br><span class=\"line\">item = &#123;<span class=\"string\">&#x27;page&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;size&#x27;</span>: <span class=\"string\">&#x27;20&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;tab&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;wd&#x27;</span>: <span class=\"string\">&#x27;迪丽热巴&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;app_id&#x27;</span>: <span class=\"string\">&#x27;220525165346815301&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;appCurrentVersion&#x27;</span>: <span class=\"string\">&#x27;7.6.2&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;platformPublic&#x27;</span>: <span class=\"string\">&#x27;Android&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;phoneModel&#x27;</span>: <span class=\"string\">&#x27;OnePlus ONEPLUSA6000&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;systemOS&#x27;</span>: <span class=\"string\">&#x27;10&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;timestamp&#x27;</span>: time_stamp,</span><br><span class=\"line\">        <span class=\"string\">&#x27;channelPackage&#x27;</span>: <span class=\"string\">&#x27;pro&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">params = <span class=\"built_in\">sorted</span>(item.items(), key=<span class=\"keyword\">lambda</span> x: x[<span class=\"number\">0</span>])   <span class=\"comment\"># 根据key值对item进行排序</span></span><br><span class=\"line\"></span><br><span class=\"line\">sb = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> params:</span><br><span class=\"line\">    sb += <span class=\"string\">f&#x27;<span class=\"subst\">&#123;p[<span class=\"number\">0</span>]&#125;</span>=<span class=\"subst\">&#123;p[<span class=\"number\">1</span>]&#125;</span>&#x27;</span>   <span class=\"comment\"># 循环排序好的item，进行字符串拼接 </span></span><br><span class=\"line\"></span><br><span class=\"line\">sign = eamonn.md5(sb + app_secret)   <span class=\"comment\"># 最后添加固定值，并进行md5</span></span><br><span class=\"line\">item[<span class=\"string\">&#x27;sign&#x27;</span>] = sign</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sign)</span><br><span class=\"line\">url = <span class=\"string\">f&#x27;https://news.dingxinwen.com/api/search/list&#x27;</span></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Host&quot;</span>: <span class=\"string\">&quot;news.dingxinwen.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Connection&quot;</span>: <span class=\"string\">&quot;Keep-Alive&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Accept-Encoding&quot;</span>: <span class=\"string\">&quot;gzip&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;okhttp/4.9.1&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(url, headers=headers, params=item)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.json())</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>经测试在运行程序后会成功返回数据。</p>\n"},{"title":"深度学习-相似度点选","abbrlink":"443336a2","date":"2022-07-08T13:17:37.000Z","top_img":"http://tva1.sinaimg.cn/large/008lIB40ly1h3zu14lh49j32yo1z44qt.jpg","cover":"http://tva1.sinaimg.cn/large/008lIB40ly1h3zu14lh49j32yo1z44qt.jpg","_content":"\n## 分析\n\n根据提示依次点击对应文字或图形完成验证。\n\n![test.png](http://tva1.sinaimg.cn/large/008lIB40ly1h3zumbwf57j30o60et440.jpg)\n\n这种验证码由于按照提示顺序进行点击，故不需识别出准确的文字。本文以WPH为例子，只记录使用小图切割+YOLOV5目标识别+相似度来返回指定坐标\n\n`url: aHR0cHM6Ly9wYXNzcG9ydC52aXAuY29tL2xvZ2luP3NyYz1odHRwcyUzQSUyRiUyRnd3dy52aXAuY29tJTJG`\n\n## 准备工作\n\n直接上selenium简单粗暴，从网站上下载一些图片为后续工作做准备\n\n![test.png](http://tva1.sinaimg.cn/large/008lIB40ly1h40hicq5f7j30n50620w0.jpg)\n\n![test.png](http://tva1.sinaimg.cn/large/008lIB40ly1h40hizuusqj30nk056tb1.jpg)\n\n## YOLO目标识别\n\n### YOLO简介\n下载yoloV5（[点击进入github](https://github.com/ultralytics/yolov5)），或使用`Git Bash`在指定文件夹目录下输入下面命令行获取：\n```bash\ngit clone https://github.com/ultralytics/yolov5.git\n```\n下载好之后进入yolov5根目录，运行`pip install -r requirements.txt`安装环境\n![test.png](http://tva1.sinaimg.cn/large/008lIB40ly1h43ypy4kryj305h0ag0v5.jpg)\n> 项目文件结构简单说明：\n> `data` 主要放置相关训练数据的配置文件（读取、解析等）\n> `models` 放置各模型的参数配置文件\n> `weights` 放置预训练模型的权重文件\n> `inference` 放置预测/推理阶段的测试图片\n> `runs` 放置训练过程中保留下来的一些数据（运行后自动创建）\n\n### 图片标注\n下载labelimg可视化图形标定工具（[点击下载](https://tzutalin.github.io/labelImg/)），Faster R-CNN，YOLO，SSD等目标检测网络所需要的数据集，均需要借此工具标定图像中的目标。生成的 XML 文件是遵循 PASCAL VOC 的格式的。软件打开界面如下：\n\n{% note info %} labelimg一定要放到全英文路径下，否则会报错 {% endnote %}\n软件打开界面如下：\n![test.png](http://tva1.sinaimg.cn/large/008lIB40ly1h40i6f6385j30vr0madol.jpg)\n软件功能介绍：\n> 按键功能介绍\n> 在labelImg窗口的左边功能键介绍:\n> “Open”是打开单个图像，\n> “Open Dir” 打开文件夹，\n> \"Change Save Dir\" xml标注文件保存的路径，\n> “Next Image” 切换到下一张图像，\n> “Prev Image”切换到上一张图像，\n> “Verify Image”校验图像，\n> “Save”保存图像，\n> “Create RectBox”画标注框一个，\n> “Duplicate RectBox”重复标注框，\n> “Delete RectBox”删除标注框，\n> “Zoom In” 放大图像，\n> “Zoom Out” 缩小图像，\n> “Fit Window”图像适用窗口，\n> “Fit Width”图像适应宽度。\n> 一组快捷键：\n> ![test.png](http://tva1.sinaimg.cn/large/008lIB40ly1h40i8py03vj30jd0ddwhx.jpg)\n> 过程\n> 一般操作的顺序：单张图片的：\n> “open file ” -----\"create rectbox \" -----\"输入类别名称 \"-----“change save dir ”-----\"Save\"\n> 如果多张图片可以open dir先打开一个文件夹，然后change save dir 选择需要存储的文件夹，其余操作如上，保存后即可Next Image跳下一张。\n> 最后在保存文件的路径下生成.xml文件，.xml文件的名字是和标注照片的名字一样，如果要修改已经标注过的图像，.xml中的信息也会随之改变。\n> 得到的.xml 和PASCAL VOC所用格式相同。\n\n下图则是标记好的实例数据，这里我将所有的文字都标记成了同一个label\n![test.png](http://tva1.sinaimg.cn/large/008lIB40ly1h40zkqhjsvj30fx0ui7c7.jpg)\n\n\n### 数据集制作\n#### 图片数据集\n- 将所有的图片放到`JPEGImages`文件夹下，在根目录下创建make_txt.py文件，代码如下，运行代码后`ImageSets`中生成数据集分类txt文件\n```python\nimport os\nimport random\ntrainval_percent = 0.1\ntrain_percent = 0.9\nxmlfilepath = 'data/Annotations'\ntxtsavepath = 'data/ImageSets'\ntotal_xml = os.listdir(xmlfilepath)\nnum = len(total_xml)\nlist = range(num)\ntv = int(num * trainval_percent)\ntr = int(tv * train_percent)\ntrainval = random.sample(list, tv)\ntrain = random.sample(trainval, tr)\nftrainval = open('data/ImageSets/trainval.txt', 'w')\nftest = open('data/ImageSets/test.txt', 'w')\nftrain = open('data/ImageSets/train.txt', 'w')\nfval = open('data/ImageSets/val.txt', 'w')\nfor i in list:\n    name = total_xml[i][:-4] + '\\n'\n    if i in trainval:\n        ftrainval.write(name)\n        if i in train:\n            ftest.write(name)\n        else:\n            fval.write(name)\n    else:\n        ftrain.write(name)\nftrainval.close()\nftrain.close()\nfval.close()\nftest.close()\n```\n{% note info no-icon %}\n运行完成后会在ImageSets中看到做好的数据集分类\n{% endnote %}\n![test.png](http://tva1.sinaimg.cn/large/008lIB40ly1h443bznu3lj303f02rglu.jpg)\n#### 标记数据集\n- 将所有个pascal-voc格式的xml文件放入到Annotations文件夹下，根目录下创建 voc_label.py 文件，代码如下。需要注意的是，sets中改为你的sets的名字（make_txt生成的） classes修改为你需要检测的类别，在本案例中，我们只需要检测一种类别\n```python\nimport xml.etree.ElementTree as ET\nimport os\nfrom os import getcwd\n\nsets = ['train', 'test', 'val']\nclasses = ['1']\n\n\ndef convert(size, box):\n    dw = 1. / size[0]\n    dh = 1. / size[1]\n    x = (box[0] + box[1]) / 2.0\n    y = (box[2] + box[3]) / 2.0\n    w = box[1] - box[0]\n    h = box[3] - box[2]\n    x = x * dw\n    w = w * dw\n    y = y * dh\n    h = h * dh\n    return x, y, w, h\n\n\ndef convert_annotation(image_id):\n    in_file = open('data/Annotations/%s.xml' % image_id)\n    out_file = open('data/labels/%s.txt' % image_id, 'w')\n    tree = ET.parse(in_file)\n    root = tree.getroot()\n    size = root.find('size')\n    w = int(size.find('width').text)\n    h = int(size.find('height').text)\n    for obj in root.iter('object'):\n        difficult = obj.find('difficult').text\n        cls = obj.find('name').text\n        if cls not in classes or int(difficult) == 1:\n            continue\n        cls_id = classes.index(cls)\n        xmlbox = obj.find('bndbox')\n        b = (float(xmlbox.find('xmin').text), float(xmlbox.find('xmax').text), float(xmlbox.find('ymin').text),\n             float(xmlbox.find('ymax').text))\n        bb = convert((w, h), b)\n        out_file.write(str(cls_id) + \" \" + \" \".join([str(a) for a in bb]) + '\\n')\n\n\nwd = getcwd()\nprint(wd)\nfor image_set in sets:\n    if not os.path.exists('data/labels/'):\n        os.makedirs('data/labels/')\n    image_ids = open('data/ImageSets/%s.txt' % image_set).read().strip().split()\n    list_file = open('data/%s.txt' % image_set, 'w')\n    for image_id in image_ids:\n        list_file.write('data/images/%s.png\\n' % image_id)\n        convert_annotation(image_id)\n    list_file.close()\n```\n{% note info no-icon %}\n运行完成后会在data/label中看到做好的标签文件，并且在data文件下出现了train、val、test的txt文件，保存了图片的路径\n{% endnote %}\n![test.png](http://tva1.sinaimg.cn/large/008lIB40ly1h4459bvkr4j30qa04vwkk.jpg)\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h445a78m6kj302q01rmx5.jpg)\n\n至此我们训练前期的准备工作差不多已经做完了\n### 调整参数\n接下来需要简单的修改一下配置，就可以开始我们的训练了\n1. 进入到data文件下，修改coco.yaml文件\n\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h4493scqutj30nx030jun.jpg)\n- `path` 为train.txt 、 val.txt与test.txt所在的路径，绝对路径与相对路径均可\n\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h4495wnn78j306o01sgly.jpg)\n- `nc` 为标记种类数，这里我们按照实际标记的种类数进行修改\n- `names` 把所有标记的种类写入进来\n\n2. 进入models文件夹，修改五个模型中任意即可\n\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h44993v12ij303702qt91.jpg)\n- `nc` 为标记种类数，这里我们按照实际标记的种类数进行修改\n\n3. 进入根目录，修改train.py文件\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h46awu34mbj30qo05ngtk.jpg)\n`weights`，`yaml`，`data`按照自己所需文件的路径修改即可 epochs迭代次数自己决定，我这里仅用100次进行测试 batch-size过高可能会影响电脑运行速度，还是要根据自己电脑硬件条件决定增加还是减少 修改完成，运行即可！\n   \n\n### 开始训练\n激动人心的时刻即将到来，在yolov5根目录运行`python  train.py`，即可看到训练已经开始了。如果运行异常，则需要反查自己的环境以及配置的路径是否有误。\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h46e9u1ervj30u10c6nc1.jpg)\n\n训练程序正常后可以在根目录运行`tensorboard --logdir runs/train`， 然后在浏览器打开`localhost:6006`观察，效果如下\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h46egunvn4j30sj0jvdln.jpg)\n\n### 结束训练\n漫长的等待之后，训练结束\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h46gw2qzdjj30uh07ik0c.jpg)\n可以看到文件夹里躺着训练结果\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h46gyatsmpj30s208o0y2.jpg)\nweights里面静静躺着训练出的模型文件\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h46gzrer13j30h501gq39.jpg)\n\n### 验证结果\n训练结束之后就需要测试我们的模型识别成功率如何，使用根目录下`detect.py`文件来测试，但是还需要指定一些内容，有以下几种方式可以实现\n1. 命令行运行\n```bash\npython detect.py --weights runs/train/exp17/weights/best.pt --source data/Samples/ --device cpu\n```\n> `weights` 为最终训练出来的模型\n> `source` 为测试图片存放位置\n> `device` 为加载模型使用的设备\n2. pycharm中指定参数\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h46jjh1ykgj30pk0epq7m.jpg)\n> 在pycharm的配置中添加参数，直接运行即可\n\n运行结束后会在`yolov5\\runs\\detect`路径中查看识别结果，可以看到识别准确率还是非常高的，至此我们的目标识别这一部分就做完了\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h46jx9pmlpj30i903ywgj.jpg)\n\n## 小图切割\n当大图的训练结束之后，则需要处理小图了。在大量观察后发现小图均有一定的规律，提示要点击的文字均处在同一位置上，那么我们就可以通过最简单的方法：直接指定像素进行图片切割来快速提取出来需要点击的文字\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h46kmrmjjxj30q409q462.jpg)\n```python\nfrom PIL import Image\nimport os\n\n\ndef splitimage(img):\n    # 小图切割\n    coordinates_list = [149, 192, 235]  # 需要切割的像素位置\n    result = list()\n    for index, x in enumerate(coordinates_list):\n        box = (x, 1, x + 26, 28)\n        small_pic = img.crop(box)\n        result.append(small_pic)\n    return result\n\n\nbig_img_dir = r'.\\yolov5\\data\\images'  # 大图所在路径\nyolo_img_list = os.listdir(big_img_dir)\n\nfor img_name in yolo_img_list:\n    print(img_name)\n\n    img_name = img_name.split('.')[0]\n    cut_img_list = splitimage(Image.open(fr'small_img/{img_name}.png'))  # 与大图对应的小图进行切割\n    if not os.path.exists(f'./small_img_cut/{img_name}'):\n        os.makedirs(f'./small_img_cut/{img_name}')\n\n    for index, cut_img in enumerate(cut_img_list):\n        cut_img.save(f'./small_img_cut/{img_name}/{index}.png')  # 切割后图片保存\n```\n运行结束后可以看到每个小图已经切割成功，并单独存入单独的文件夹内\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h47eihrabnj30860c778e.jpg)\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h47eisgj0lj309603rt8r.jpg)\n那么这一步小图也处理完成，仅仅剩下最后一步就可以完成识别了\n\n## 孪生网络相似度训练\n### 孪生网络简介\n这里就不过多介绍了，可以直接去大佬github中详细学习[点击进入](https://github.com/bubbliiiing/Siamese-keras)\n### 数据集制作\n这里我对yolov5中的detect.py进行了小小的改动，将识别出来的大图放入到之前切割好的小图中，方便我们后续操作\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h47r3g7i0oj30po04rdhy.jpg)\n代码如下：\n```python\nfrom pathlib import Path\nimport cv2\nimport torch\nimport numpy as np\nfrom utils.augmentations import letterbox\nfrom models.common import DetectMultiBackend\nfrom utils.general import check_img_size, non_max_suppression, scale_coords\nfrom utils.plots import save_one_box\n\n\nclass Detect:\n    def __init__(self,\n                 weights='weights/best.pt',  # model.pt path(s)\n                 source='data/Samples',  # file/dir/URL/glob, 0 for webcam\n                 data='data/coco128.yaml',  # dataset.yaml path\n                 imgsz=(640, 640),  # inference size (height, width)\n                 project='runs/detect',  # save results to project/name\n                 ):\n        self.source = str(source)\n        self.weights = weights\n        self.data = data\n        self.imgsz = imgsz\n\n        self.model = None\n\n        self.save_dir = Path(project)  # increment run\n        self.save_dir.mkdir(parents=True, exist_ok=True)  # make dir\n        self.load_model()\n\n    def load_model(self):\n        self.model = DetectMultiBackend(self.weights, data=self.data)\n        stride, names, pt = self.model.stride, self.model.names, self.model.pt\n        imgsz = check_img_size(self.imgsz, s=stride)  # check image size\n        bs = 1  # batch_size\n        self.model.warmup(imgsz=(1 if pt else bs, 3, *imgsz))  # warmup\n\n    def identify(self, pic_path):\n        im0s = cv2.imread(pic_path)\n        img = letterbox(im0s)[0]\n        img = img.transpose((2, 0, 1))[::-1]  # HWC to CHW, BGR to RGB\n        im = np.ascontiguousarray(img)\n        im = torch.from_numpy(im).to().float()\n        im /= 255  # 0 - 255 to 0.0 - 1.0\n        if len(im.shape) == 3:\n            im = im[None]  # expand for batch dim\n\n        pred = self.model(im)\n        pred = non_max_suppression(pred)\n\n        for i, det in enumerate(pred):  # per image\n            im0 = im0s.copy()\n\n            p = Path(pic_path)  # to Path\n            imc = im0.copy()\n            if len(det):\n                det[:, :4] = scale_coords(im.shape[2:], det[:, :4], im0.shape).round()\n                for *xyxy, conf, cls in reversed(det):\n                    save_file_path = Path(r'E:\\blog\\deep_learn\\small_img_cut') / p.stem / f'{p.stem}.jpg'\n                    save_one_box(xyxy, imc, file=save_file_path, BGR=True)\n                    # print([i.cpu().detach().numpy().tolist() for i in xyxy])\n\n\nif __name__ == '__main__':\n    import os\n    test = Detect()\n\n    pic_list = os.listdir(r'E:\\blog\\deep_learn\\yolov5\\data\\images')\n    for pic in pic_list:\n        test.identify(fr'E:\\blog\\deep_learn\\big_img\\{pic}')\n```\n接下来需要将相同的文字都放入到一个单独的文件夹内，为了能够快速处理，可以使用一下代码实现。\n```python\nimport time\nimport tkinter\nfrom pathlib import Path\nimport os\nimport cv2\nimport hashlib\nimport random\nimport numpy as np\n\nFILE = Path(__file__).resolve()\nROOT = FILE.parents[0]\nROOT = Path(os.path.relpath(ROOT, Path.cwd()))\nroot = tkinter.Tk()\nroot.title(\"Preview\")\n\nnum = 1\n\n\ndef image_Splicing(data):\n    for big_pic in data['big_pic_path']:\n        for small_pic in data['small_pic_path']:\n\n            cv2.namedWindow('Face', 0)  # 创建一个名为“Face”的窗口用于显示图像\n            cv2.moveWindow('Face', 100, 50)  # 移动窗口到适当位置\n            cv2.resizeWindow('Face', 350, 175)\n            img1 = cv2.imread(str(big_pic))\n            img2 = cv2.imread(str(small_pic))\n\n            img1 = cv2.resize(img1, (640, 640))\n            img2 = cv2.resize(img2, (640, 640))\n            new_img = np.hstack([img1, img2])\n            cv2.imshow('Face', new_img)  # 显示图像\n            cv2.waitKey(100)  # 设置显示时间，1000ms\n            judge = input('是否相同：')\n            if judge:\n                print(big_pic, small_pic)\n                tag_pic(big_pic, small_pic)\n                data['big_pic_path'].remove(big_pic)\n                data['small_pic_path'].remove(small_pic)\n                return image_Splicing(data)\n\n            cv2.destroyWindow('Face')\n\n\ndef get_pic_list():\n    pic_id_list = os.listdir(Path(ROOT / 'small_img_cut'))\n    for pic_id in pic_id_list:\n        pic_list = os.listdir(Path(ROOT / 'small_img_cut' / pic_id))\n        data = {'pic_id': pic_id, 'small_pic_path': [], 'big_pic_path': []}\n        for pic in pic_list:\n            pic_path = Path(ROOT / 'small_img_cut' / pic_id / pic)\n            if len(pic_path.stem) < 5:\n                data['small_pic_path'].append(pic_path)\n            else:\n                data['big_pic_path'].append(pic_path)\n        image_Splicing(data)\n\n\ndef hash():\n    time12 = int(time.time() * 1000)\n    rand04 = random.randint(1000, 9999)\n    return md5(str(time12) + str(rand04))\n\n\ndef md5(*arg):\n    hl = hashlib.md5()\n    line = ''.join(list(map(lambda x: str(x), arg)))\n    hl.update(line.encode(encoding='utf-8'))\n    return hl.hexdigest()\n\n\ndef tag_pic(big_pic, small_pic):\n    global num\n    path = f'./Siamese-pytorch/datasets/images_background/pic{num}'\n    num += 1\n    if not os.path.exists(path):\n        os.mkdir(path)\n\n    big_file = open(big_pic, \"rb\")\n    big_data = big_file.read()\n    big_file.close()\n\n    for i in range(5):\n        new_file = open(f\"{path}/{hash()}.jpg\", \"wb\")\n        new_file.write(big_data)\n        new_file.close()\n\n    small_file = open(small_pic, \"rb\")\n    small_data = small_file.read()\n    small_file.close()\n\n    for i in range(5):\n        new_file = open(f\"{path}/{hash()}.jpg\", \"wb\")\n        new_file.write(small_data)\n        new_file.close()\n\n\nif __name__ == '__main__':\n    get_pic_list()\n```\n运行以上代码后可以看到会显示以下图片\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h4ce2aod6yj309s05raav.jpg)\n并且在控制台会有以下内容\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h4ce33kqxzj302t01d0sl.jpg)\n接下来只需要动动自己那发财的小手，如果相同则输入`1`后回车，如果不相同则直接回车。 就可以看到datasets中开始保存相同的文字图片了\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h4d6854b5yj30ry08in12.jpg)\n接下来的开始训练，结束训练以及验证结果均可以查看大佬的github进行操作，这里直接说结果，可以看到识别准确率还是很高的\n\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h4d6p2ylhnj30gk0aa41t.jpg)\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h4d6pcl6d1j30gv09f41s.jpg)\n## 结尾\n最后只需要将两个识别方法进行拼接，并删除掉不相关代码，即可实现识别对应问题或图形，也可通过flask来实现接口调用","source":"_posts/深度学习-相似度点选.md","raw":"---\ntitle: 深度学习-相似度点选\nabbrlink: 443336a2\ndate: 2022-07-08 21:17:37\ntags: [python, 深度学习]\ntop_img: http://tva1.sinaimg.cn/large/008lIB40ly1h3zu14lh49j32yo1z44qt.jpg\ncover: http://tva1.sinaimg.cn/large/008lIB40ly1h3zu14lh49j32yo1z44qt.jpg\n---\n\n## 分析\n\n根据提示依次点击对应文字或图形完成验证。\n\n![test.png](http://tva1.sinaimg.cn/large/008lIB40ly1h3zumbwf57j30o60et440.jpg)\n\n这种验证码由于按照提示顺序进行点击，故不需识别出准确的文字。本文以WPH为例子，只记录使用小图切割+YOLOV5目标识别+相似度来返回指定坐标\n\n`url: aHR0cHM6Ly9wYXNzcG9ydC52aXAuY29tL2xvZ2luP3NyYz1odHRwcyUzQSUyRiUyRnd3dy52aXAuY29tJTJG`\n\n## 准备工作\n\n直接上selenium简单粗暴，从网站上下载一些图片为后续工作做准备\n\n![test.png](http://tva1.sinaimg.cn/large/008lIB40ly1h40hicq5f7j30n50620w0.jpg)\n\n![test.png](http://tva1.sinaimg.cn/large/008lIB40ly1h40hizuusqj30nk056tb1.jpg)\n\n## YOLO目标识别\n\n### YOLO简介\n下载yoloV5（[点击进入github](https://github.com/ultralytics/yolov5)），或使用`Git Bash`在指定文件夹目录下输入下面命令行获取：\n```bash\ngit clone https://github.com/ultralytics/yolov5.git\n```\n下载好之后进入yolov5根目录，运行`pip install -r requirements.txt`安装环境\n![test.png](http://tva1.sinaimg.cn/large/008lIB40ly1h43ypy4kryj305h0ag0v5.jpg)\n> 项目文件结构简单说明：\n> `data` 主要放置相关训练数据的配置文件（读取、解析等）\n> `models` 放置各模型的参数配置文件\n> `weights` 放置预训练模型的权重文件\n> `inference` 放置预测/推理阶段的测试图片\n> `runs` 放置训练过程中保留下来的一些数据（运行后自动创建）\n\n### 图片标注\n下载labelimg可视化图形标定工具（[点击下载](https://tzutalin.github.io/labelImg/)），Faster R-CNN，YOLO，SSD等目标检测网络所需要的数据集，均需要借此工具标定图像中的目标。生成的 XML 文件是遵循 PASCAL VOC 的格式的。软件打开界面如下：\n\n{% note info %} labelimg一定要放到全英文路径下，否则会报错 {% endnote %}\n软件打开界面如下：\n![test.png](http://tva1.sinaimg.cn/large/008lIB40ly1h40i6f6385j30vr0madol.jpg)\n软件功能介绍：\n> 按键功能介绍\n> 在labelImg窗口的左边功能键介绍:\n> “Open”是打开单个图像，\n> “Open Dir” 打开文件夹，\n> \"Change Save Dir\" xml标注文件保存的路径，\n> “Next Image” 切换到下一张图像，\n> “Prev Image”切换到上一张图像，\n> “Verify Image”校验图像，\n> “Save”保存图像，\n> “Create RectBox”画标注框一个，\n> “Duplicate RectBox”重复标注框，\n> “Delete RectBox”删除标注框，\n> “Zoom In” 放大图像，\n> “Zoom Out” 缩小图像，\n> “Fit Window”图像适用窗口，\n> “Fit Width”图像适应宽度。\n> 一组快捷键：\n> ![test.png](http://tva1.sinaimg.cn/large/008lIB40ly1h40i8py03vj30jd0ddwhx.jpg)\n> 过程\n> 一般操作的顺序：单张图片的：\n> “open file ” -----\"create rectbox \" -----\"输入类别名称 \"-----“change save dir ”-----\"Save\"\n> 如果多张图片可以open dir先打开一个文件夹，然后change save dir 选择需要存储的文件夹，其余操作如上，保存后即可Next Image跳下一张。\n> 最后在保存文件的路径下生成.xml文件，.xml文件的名字是和标注照片的名字一样，如果要修改已经标注过的图像，.xml中的信息也会随之改变。\n> 得到的.xml 和PASCAL VOC所用格式相同。\n\n下图则是标记好的实例数据，这里我将所有的文字都标记成了同一个label\n![test.png](http://tva1.sinaimg.cn/large/008lIB40ly1h40zkqhjsvj30fx0ui7c7.jpg)\n\n\n### 数据集制作\n#### 图片数据集\n- 将所有的图片放到`JPEGImages`文件夹下，在根目录下创建make_txt.py文件，代码如下，运行代码后`ImageSets`中生成数据集分类txt文件\n```python\nimport os\nimport random\ntrainval_percent = 0.1\ntrain_percent = 0.9\nxmlfilepath = 'data/Annotations'\ntxtsavepath = 'data/ImageSets'\ntotal_xml = os.listdir(xmlfilepath)\nnum = len(total_xml)\nlist = range(num)\ntv = int(num * trainval_percent)\ntr = int(tv * train_percent)\ntrainval = random.sample(list, tv)\ntrain = random.sample(trainval, tr)\nftrainval = open('data/ImageSets/trainval.txt', 'w')\nftest = open('data/ImageSets/test.txt', 'w')\nftrain = open('data/ImageSets/train.txt', 'w')\nfval = open('data/ImageSets/val.txt', 'w')\nfor i in list:\n    name = total_xml[i][:-4] + '\\n'\n    if i in trainval:\n        ftrainval.write(name)\n        if i in train:\n            ftest.write(name)\n        else:\n            fval.write(name)\n    else:\n        ftrain.write(name)\nftrainval.close()\nftrain.close()\nfval.close()\nftest.close()\n```\n{% note info no-icon %}\n运行完成后会在ImageSets中看到做好的数据集分类\n{% endnote %}\n![test.png](http://tva1.sinaimg.cn/large/008lIB40ly1h443bznu3lj303f02rglu.jpg)\n#### 标记数据集\n- 将所有个pascal-voc格式的xml文件放入到Annotations文件夹下，根目录下创建 voc_label.py 文件，代码如下。需要注意的是，sets中改为你的sets的名字（make_txt生成的） classes修改为你需要检测的类别，在本案例中，我们只需要检测一种类别\n```python\nimport xml.etree.ElementTree as ET\nimport os\nfrom os import getcwd\n\nsets = ['train', 'test', 'val']\nclasses = ['1']\n\n\ndef convert(size, box):\n    dw = 1. / size[0]\n    dh = 1. / size[1]\n    x = (box[0] + box[1]) / 2.0\n    y = (box[2] + box[3]) / 2.0\n    w = box[1] - box[0]\n    h = box[3] - box[2]\n    x = x * dw\n    w = w * dw\n    y = y * dh\n    h = h * dh\n    return x, y, w, h\n\n\ndef convert_annotation(image_id):\n    in_file = open('data/Annotations/%s.xml' % image_id)\n    out_file = open('data/labels/%s.txt' % image_id, 'w')\n    tree = ET.parse(in_file)\n    root = tree.getroot()\n    size = root.find('size')\n    w = int(size.find('width').text)\n    h = int(size.find('height').text)\n    for obj in root.iter('object'):\n        difficult = obj.find('difficult').text\n        cls = obj.find('name').text\n        if cls not in classes or int(difficult) == 1:\n            continue\n        cls_id = classes.index(cls)\n        xmlbox = obj.find('bndbox')\n        b = (float(xmlbox.find('xmin').text), float(xmlbox.find('xmax').text), float(xmlbox.find('ymin').text),\n             float(xmlbox.find('ymax').text))\n        bb = convert((w, h), b)\n        out_file.write(str(cls_id) + \" \" + \" \".join([str(a) for a in bb]) + '\\n')\n\n\nwd = getcwd()\nprint(wd)\nfor image_set in sets:\n    if not os.path.exists('data/labels/'):\n        os.makedirs('data/labels/')\n    image_ids = open('data/ImageSets/%s.txt' % image_set).read().strip().split()\n    list_file = open('data/%s.txt' % image_set, 'w')\n    for image_id in image_ids:\n        list_file.write('data/images/%s.png\\n' % image_id)\n        convert_annotation(image_id)\n    list_file.close()\n```\n{% note info no-icon %}\n运行完成后会在data/label中看到做好的标签文件，并且在data文件下出现了train、val、test的txt文件，保存了图片的路径\n{% endnote %}\n![test.png](http://tva1.sinaimg.cn/large/008lIB40ly1h4459bvkr4j30qa04vwkk.jpg)\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h445a78m6kj302q01rmx5.jpg)\n\n至此我们训练前期的准备工作差不多已经做完了\n### 调整参数\n接下来需要简单的修改一下配置，就可以开始我们的训练了\n1. 进入到data文件下，修改coco.yaml文件\n\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h4493scqutj30nx030jun.jpg)\n- `path` 为train.txt 、 val.txt与test.txt所在的路径，绝对路径与相对路径均可\n\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h4495wnn78j306o01sgly.jpg)\n- `nc` 为标记种类数，这里我们按照实际标记的种类数进行修改\n- `names` 把所有标记的种类写入进来\n\n2. 进入models文件夹，修改五个模型中任意即可\n\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h44993v12ij303702qt91.jpg)\n- `nc` 为标记种类数，这里我们按照实际标记的种类数进行修改\n\n3. 进入根目录，修改train.py文件\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h46awu34mbj30qo05ngtk.jpg)\n`weights`，`yaml`，`data`按照自己所需文件的路径修改即可 epochs迭代次数自己决定，我这里仅用100次进行测试 batch-size过高可能会影响电脑运行速度，还是要根据自己电脑硬件条件决定增加还是减少 修改完成，运行即可！\n   \n\n### 开始训练\n激动人心的时刻即将到来，在yolov5根目录运行`python  train.py`，即可看到训练已经开始了。如果运行异常，则需要反查自己的环境以及配置的路径是否有误。\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h46e9u1ervj30u10c6nc1.jpg)\n\n训练程序正常后可以在根目录运行`tensorboard --logdir runs/train`， 然后在浏览器打开`localhost:6006`观察，效果如下\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h46egunvn4j30sj0jvdln.jpg)\n\n### 结束训练\n漫长的等待之后，训练结束\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h46gw2qzdjj30uh07ik0c.jpg)\n可以看到文件夹里躺着训练结果\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h46gyatsmpj30s208o0y2.jpg)\nweights里面静静躺着训练出的模型文件\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h46gzrer13j30h501gq39.jpg)\n\n### 验证结果\n训练结束之后就需要测试我们的模型识别成功率如何，使用根目录下`detect.py`文件来测试，但是还需要指定一些内容，有以下几种方式可以实现\n1. 命令行运行\n```bash\npython detect.py --weights runs/train/exp17/weights/best.pt --source data/Samples/ --device cpu\n```\n> `weights` 为最终训练出来的模型\n> `source` 为测试图片存放位置\n> `device` 为加载模型使用的设备\n2. pycharm中指定参数\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h46jjh1ykgj30pk0epq7m.jpg)\n> 在pycharm的配置中添加参数，直接运行即可\n\n运行结束后会在`yolov5\\runs\\detect`路径中查看识别结果，可以看到识别准确率还是非常高的，至此我们的目标识别这一部分就做完了\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h46jx9pmlpj30i903ywgj.jpg)\n\n## 小图切割\n当大图的训练结束之后，则需要处理小图了。在大量观察后发现小图均有一定的规律，提示要点击的文字均处在同一位置上，那么我们就可以通过最简单的方法：直接指定像素进行图片切割来快速提取出来需要点击的文字\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h46kmrmjjxj30q409q462.jpg)\n```python\nfrom PIL import Image\nimport os\n\n\ndef splitimage(img):\n    # 小图切割\n    coordinates_list = [149, 192, 235]  # 需要切割的像素位置\n    result = list()\n    for index, x in enumerate(coordinates_list):\n        box = (x, 1, x + 26, 28)\n        small_pic = img.crop(box)\n        result.append(small_pic)\n    return result\n\n\nbig_img_dir = r'.\\yolov5\\data\\images'  # 大图所在路径\nyolo_img_list = os.listdir(big_img_dir)\n\nfor img_name in yolo_img_list:\n    print(img_name)\n\n    img_name = img_name.split('.')[0]\n    cut_img_list = splitimage(Image.open(fr'small_img/{img_name}.png'))  # 与大图对应的小图进行切割\n    if not os.path.exists(f'./small_img_cut/{img_name}'):\n        os.makedirs(f'./small_img_cut/{img_name}')\n\n    for index, cut_img in enumerate(cut_img_list):\n        cut_img.save(f'./small_img_cut/{img_name}/{index}.png')  # 切割后图片保存\n```\n运行结束后可以看到每个小图已经切割成功，并单独存入单独的文件夹内\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h47eihrabnj30860c778e.jpg)\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h47eisgj0lj309603rt8r.jpg)\n那么这一步小图也处理完成，仅仅剩下最后一步就可以完成识别了\n\n## 孪生网络相似度训练\n### 孪生网络简介\n这里就不过多介绍了，可以直接去大佬github中详细学习[点击进入](https://github.com/bubbliiiing/Siamese-keras)\n### 数据集制作\n这里我对yolov5中的detect.py进行了小小的改动，将识别出来的大图放入到之前切割好的小图中，方便我们后续操作\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h47r3g7i0oj30po04rdhy.jpg)\n代码如下：\n```python\nfrom pathlib import Path\nimport cv2\nimport torch\nimport numpy as np\nfrom utils.augmentations import letterbox\nfrom models.common import DetectMultiBackend\nfrom utils.general import check_img_size, non_max_suppression, scale_coords\nfrom utils.plots import save_one_box\n\n\nclass Detect:\n    def __init__(self,\n                 weights='weights/best.pt',  # model.pt path(s)\n                 source='data/Samples',  # file/dir/URL/glob, 0 for webcam\n                 data='data/coco128.yaml',  # dataset.yaml path\n                 imgsz=(640, 640),  # inference size (height, width)\n                 project='runs/detect',  # save results to project/name\n                 ):\n        self.source = str(source)\n        self.weights = weights\n        self.data = data\n        self.imgsz = imgsz\n\n        self.model = None\n\n        self.save_dir = Path(project)  # increment run\n        self.save_dir.mkdir(parents=True, exist_ok=True)  # make dir\n        self.load_model()\n\n    def load_model(self):\n        self.model = DetectMultiBackend(self.weights, data=self.data)\n        stride, names, pt = self.model.stride, self.model.names, self.model.pt\n        imgsz = check_img_size(self.imgsz, s=stride)  # check image size\n        bs = 1  # batch_size\n        self.model.warmup(imgsz=(1 if pt else bs, 3, *imgsz))  # warmup\n\n    def identify(self, pic_path):\n        im0s = cv2.imread(pic_path)\n        img = letterbox(im0s)[0]\n        img = img.transpose((2, 0, 1))[::-1]  # HWC to CHW, BGR to RGB\n        im = np.ascontiguousarray(img)\n        im = torch.from_numpy(im).to().float()\n        im /= 255  # 0 - 255 to 0.0 - 1.0\n        if len(im.shape) == 3:\n            im = im[None]  # expand for batch dim\n\n        pred = self.model(im)\n        pred = non_max_suppression(pred)\n\n        for i, det in enumerate(pred):  # per image\n            im0 = im0s.copy()\n\n            p = Path(pic_path)  # to Path\n            imc = im0.copy()\n            if len(det):\n                det[:, :4] = scale_coords(im.shape[2:], det[:, :4], im0.shape).round()\n                for *xyxy, conf, cls in reversed(det):\n                    save_file_path = Path(r'E:\\blog\\deep_learn\\small_img_cut') / p.stem / f'{p.stem}.jpg'\n                    save_one_box(xyxy, imc, file=save_file_path, BGR=True)\n                    # print([i.cpu().detach().numpy().tolist() for i in xyxy])\n\n\nif __name__ == '__main__':\n    import os\n    test = Detect()\n\n    pic_list = os.listdir(r'E:\\blog\\deep_learn\\yolov5\\data\\images')\n    for pic in pic_list:\n        test.identify(fr'E:\\blog\\deep_learn\\big_img\\{pic}')\n```\n接下来需要将相同的文字都放入到一个单独的文件夹内，为了能够快速处理，可以使用一下代码实现。\n```python\nimport time\nimport tkinter\nfrom pathlib import Path\nimport os\nimport cv2\nimport hashlib\nimport random\nimport numpy as np\n\nFILE = Path(__file__).resolve()\nROOT = FILE.parents[0]\nROOT = Path(os.path.relpath(ROOT, Path.cwd()))\nroot = tkinter.Tk()\nroot.title(\"Preview\")\n\nnum = 1\n\n\ndef image_Splicing(data):\n    for big_pic in data['big_pic_path']:\n        for small_pic in data['small_pic_path']:\n\n            cv2.namedWindow('Face', 0)  # 创建一个名为“Face”的窗口用于显示图像\n            cv2.moveWindow('Face', 100, 50)  # 移动窗口到适当位置\n            cv2.resizeWindow('Face', 350, 175)\n            img1 = cv2.imread(str(big_pic))\n            img2 = cv2.imread(str(small_pic))\n\n            img1 = cv2.resize(img1, (640, 640))\n            img2 = cv2.resize(img2, (640, 640))\n            new_img = np.hstack([img1, img2])\n            cv2.imshow('Face', new_img)  # 显示图像\n            cv2.waitKey(100)  # 设置显示时间，1000ms\n            judge = input('是否相同：')\n            if judge:\n                print(big_pic, small_pic)\n                tag_pic(big_pic, small_pic)\n                data['big_pic_path'].remove(big_pic)\n                data['small_pic_path'].remove(small_pic)\n                return image_Splicing(data)\n\n            cv2.destroyWindow('Face')\n\n\ndef get_pic_list():\n    pic_id_list = os.listdir(Path(ROOT / 'small_img_cut'))\n    for pic_id in pic_id_list:\n        pic_list = os.listdir(Path(ROOT / 'small_img_cut' / pic_id))\n        data = {'pic_id': pic_id, 'small_pic_path': [], 'big_pic_path': []}\n        for pic in pic_list:\n            pic_path = Path(ROOT / 'small_img_cut' / pic_id / pic)\n            if len(pic_path.stem) < 5:\n                data['small_pic_path'].append(pic_path)\n            else:\n                data['big_pic_path'].append(pic_path)\n        image_Splicing(data)\n\n\ndef hash():\n    time12 = int(time.time() * 1000)\n    rand04 = random.randint(1000, 9999)\n    return md5(str(time12) + str(rand04))\n\n\ndef md5(*arg):\n    hl = hashlib.md5()\n    line = ''.join(list(map(lambda x: str(x), arg)))\n    hl.update(line.encode(encoding='utf-8'))\n    return hl.hexdigest()\n\n\ndef tag_pic(big_pic, small_pic):\n    global num\n    path = f'./Siamese-pytorch/datasets/images_background/pic{num}'\n    num += 1\n    if not os.path.exists(path):\n        os.mkdir(path)\n\n    big_file = open(big_pic, \"rb\")\n    big_data = big_file.read()\n    big_file.close()\n\n    for i in range(5):\n        new_file = open(f\"{path}/{hash()}.jpg\", \"wb\")\n        new_file.write(big_data)\n        new_file.close()\n\n    small_file = open(small_pic, \"rb\")\n    small_data = small_file.read()\n    small_file.close()\n\n    for i in range(5):\n        new_file = open(f\"{path}/{hash()}.jpg\", \"wb\")\n        new_file.write(small_data)\n        new_file.close()\n\n\nif __name__ == '__main__':\n    get_pic_list()\n```\n运行以上代码后可以看到会显示以下图片\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h4ce2aod6yj309s05raav.jpg)\n并且在控制台会有以下内容\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h4ce33kqxzj302t01d0sl.jpg)\n接下来只需要动动自己那发财的小手，如果相同则输入`1`后回车，如果不相同则直接回车。 就可以看到datasets中开始保存相同的文字图片了\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h4d6854b5yj30ry08in12.jpg)\n接下来的开始训练，结束训练以及验证结果均可以查看大佬的github进行操作，这里直接说结果，可以看到识别准确率还是很高的\n\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h4d6p2ylhnj30gk0aa41t.jpg)\n![image.png](http://tva1.sinaimg.cn/large/008lIB40ly1h4d6pcl6d1j30gv09f41s.jpg)\n## 结尾\n最后只需要将两个识别方法进行拼接，并删除掉不相关代码，即可实现识别对应问题或图形，也可通过flask来实现接口调用","slug":"深度学习-相似度点选","published":1,"updated":"2022-07-31T14:09:47.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl71powxs000999ui9sneeidc","content":"<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>根据提示依次点击对应文字或图形完成验证。</p>\n<p><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3zumbwf57j30o60et440.jpg\" alt=\"test.png\"></p>\n<p>这种验证码由于按照提示顺序进行点击，故不需识别出准确的文字。本文以WPH为例子，只记录使用小图切割+YOLOV5目标识别+相似度来返回指定坐标</p>\n<p><code>url: aHR0cHM6Ly9wYXNzcG9ydC52aXAuY29tL2xvZ2luP3NyYz1odHRwcyUzQSUyRiUyRnd3dy52aXAuY29tJTJG</code></p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>直接上selenium简单粗暴，从网站上下载一些图片为后续工作做准备</p>\n<p><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h40hicq5f7j30n50620w0.jpg\" alt=\"test.png\"></p>\n<p><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h40hizuusqj30nk056tb1.jpg\" alt=\"test.png\"></p>\n<h2 id=\"YOLO目标识别\"><a href=\"#YOLO目标识别\" class=\"headerlink\" title=\"YOLO目标识别\"></a>YOLO目标识别</h2><h3 id=\"YOLO简介\"><a href=\"#YOLO简介\" class=\"headerlink\" title=\"YOLO简介\"></a>YOLO简介</h3><p>下载yoloV5（<a href=\"https://github.com/ultralytics/yolov5\">点击进入github</a>），或使用<code>Git Bash</code>在指定文件夹目录下输入下面命令行获取：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/ultralytics/yolov5.git</span><br></pre></td></tr></table></figure>\n<p>下载好之后进入yolov5根目录，运行<code>pip install -r requirements.txt</code>安装环境<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h43ypy4kryj305h0ag0v5.jpg\" alt=\"test.png\"></p>\n<blockquote>\n<p>项目文件结构简单说明：<br><code>data</code> 主要放置相关训练数据的配置文件（读取、解析等）<br><code>models</code> 放置各模型的参数配置文件<br><code>weights</code> 放置预训练模型的权重文件<br><code>inference</code> 放置预测&#x2F;推理阶段的测试图片<br><code>runs</code> 放置训练过程中保留下来的一些数据（运行后自动创建）</p>\n</blockquote>\n<h3 id=\"图片标注\"><a href=\"#图片标注\" class=\"headerlink\" title=\"图片标注\"></a>图片标注</h3><p>下载labelimg可视化图形标定工具（<a href=\"https://tzutalin.github.io/labelImg/\">点击下载</a>），Faster R-CNN，YOLO，SSD等目标检测网络所需要的数据集，均需要借此工具标定图像中的目标。生成的 XML 文件是遵循 PASCAL VOC 的格式的。软件打开界面如下：</p>\n<div class=\"note info flat\"><p>labelimg一定要放到全英文路径下，否则会报错 </p>\n</div>\n<p>软件打开界面如下：<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h40i6f6385j30vr0madol.jpg\" alt=\"test.png\"><br>软件功能介绍：</p>\n<blockquote>\n<p>按键功能介绍<br>在labelImg窗口的左边功能键介绍:<br>“Open”是打开单个图像，<br>“Open Dir” 打开文件夹，<br>“Change Save Dir” xml标注文件保存的路径，<br>“Next Image” 切换到下一张图像，<br>“Prev Image”切换到上一张图像，<br>“Verify Image”校验图像，<br>“Save”保存图像，<br>“Create RectBox”画标注框一个，<br>“Duplicate RectBox”重复标注框，<br>“Delete RectBox”删除标注框，<br>“Zoom In” 放大图像，<br>“Zoom Out” 缩小图像，<br>“Fit Window”图像适用窗口，<br>“Fit Width”图像适应宽度。<br>一组快捷键：<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h40i8py03vj30jd0ddwhx.jpg\" alt=\"test.png\"><br>过程<br>一般操作的顺序：单张图片的：<br>“open file ” —–”create rectbox “ —–”输入类别名称 “—–“change save dir ”—–”Save”<br>如果多张图片可以open dir先打开一个文件夹，然后change save dir 选择需要存储的文件夹，其余操作如上，保存后即可Next Image跳下一张。<br>最后在保存文件的路径下生成.xml文件，.xml文件的名字是和标注照片的名字一样，如果要修改已经标注过的图像，.xml中的信息也会随之改变。<br>得到的.xml 和PASCAL VOC所用格式相同。</p>\n</blockquote>\n<p>下图则是标记好的实例数据，这里我将所有的文字都标记成了同一个label<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h40zkqhjsvj30fx0ui7c7.jpg\" alt=\"test.png\"></p>\n<h3 id=\"数据集制作\"><a href=\"#数据集制作\" class=\"headerlink\" title=\"数据集制作\"></a>数据集制作</h3><h4 id=\"图片数据集\"><a href=\"#图片数据集\" class=\"headerlink\" title=\"图片数据集\"></a>图片数据集</h4><ul>\n<li>将所有的图片放到<code>JPEGImages</code>文件夹下，在根目录下创建make_txt.py文件，代码如下，运行代码后<code>ImageSets</code>中生成数据集分类txt文件<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\">trainval_percent = <span class=\"number\">0.1</span></span><br><span class=\"line\">train_percent = <span class=\"number\">0.9</span></span><br><span class=\"line\">xmlfilepath = <span class=\"string\">&#x27;data/Annotations&#x27;</span></span><br><span class=\"line\">txtsavepath = <span class=\"string\">&#x27;data/ImageSets&#x27;</span></span><br><span class=\"line\">total_xml = os.listdir(xmlfilepath)</span><br><span class=\"line\">num = <span class=\"built_in\">len</span>(total_xml)</span><br><span class=\"line\"><span class=\"built_in\">list</span> = <span class=\"built_in\">range</span>(num)</span><br><span class=\"line\">tv = <span class=\"built_in\">int</span>(num * trainval_percent)</span><br><span class=\"line\">tr = <span class=\"built_in\">int</span>(tv * train_percent)</span><br><span class=\"line\">trainval = random.sample(<span class=\"built_in\">list</span>, tv)</span><br><span class=\"line\">train = random.sample(trainval, tr)</span><br><span class=\"line\">ftrainval = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;data/ImageSets/trainval.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">ftest = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;data/ImageSets/test.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">ftrain = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;data/ImageSets/train.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">fval = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;data/ImageSets/val.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">list</span>:</span><br><span class=\"line\">    name = total_xml[i][:-<span class=\"number\">4</span>] + <span class=\"string\">&#x27;\\n&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> trainval:</span><br><span class=\"line\">        ftrainval.write(name)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> train:</span><br><span class=\"line\">            ftest.write(name)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            fval.write(name)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        ftrain.write(name)</span><br><span class=\"line\">ftrainval.close()</span><br><span class=\"line\">ftrain.close()</span><br><span class=\"line\">fval.close()</span><br><span class=\"line\">ftest.close()</span><br></pre></td></tr></table></figure>\n<div class=\"note info no-icon flat\"><p>运行完成后会在ImageSets中看到做好的数据集分类</p>\n</div>\n<img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h443bznu3lj303f02rglu.jpg\" alt=\"test.png\"></li>\n</ul>\n<h4 id=\"标记数据集\"><a href=\"#标记数据集\" class=\"headerlink\" title=\"标记数据集\"></a>标记数据集</h4><ul>\n<li>将所有个pascal-voc格式的xml文件放入到Annotations文件夹下，根目录下创建 voc_label.py 文件，代码如下。需要注意的是，sets中改为你的sets的名字（make_txt生成的） classes修改为你需要检测的类别，在本案例中，我们只需要检测一种类别<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> xml.etree.ElementTree <span class=\"keyword\">as</span> ET</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> os <span class=\"keyword\">import</span> getcwd</span><br><span class=\"line\"></span><br><span class=\"line\">sets = [<span class=\"string\">&#x27;train&#x27;</span>, <span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;val&#x27;</span>]</span><br><span class=\"line\">classes = [<span class=\"string\">&#x27;1&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">convert</span>(<span class=\"params\">size, box</span>):</span><br><span class=\"line\">    dw = <span class=\"number\">1.</span> / size[<span class=\"number\">0</span>]</span><br><span class=\"line\">    dh = <span class=\"number\">1.</span> / size[<span class=\"number\">1</span>]</span><br><span class=\"line\">    x = (box[<span class=\"number\">0</span>] + box[<span class=\"number\">1</span>]) / <span class=\"number\">2.0</span></span><br><span class=\"line\">    y = (box[<span class=\"number\">2</span>] + box[<span class=\"number\">3</span>]) / <span class=\"number\">2.0</span></span><br><span class=\"line\">    w = box[<span class=\"number\">1</span>] - box[<span class=\"number\">0</span>]</span><br><span class=\"line\">    h = box[<span class=\"number\">3</span>] - box[<span class=\"number\">2</span>]</span><br><span class=\"line\">    x = x * dw</span><br><span class=\"line\">    w = w * dw</span><br><span class=\"line\">    y = y * dh</span><br><span class=\"line\">    h = h * dh</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x, y, w, h</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">convert_annotation</span>(<span class=\"params\">image_id</span>):</span><br><span class=\"line\">    in_file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;data/Annotations/%s.xml&#x27;</span> % image_id)</span><br><span class=\"line\">    out_file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;data/labels/%s.txt&#x27;</span> % image_id, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">    tree = ET.parse(in_file)</span><br><span class=\"line\">    root = tree.getroot()</span><br><span class=\"line\">    size = root.find(<span class=\"string\">&#x27;size&#x27;</span>)</span><br><span class=\"line\">    w = <span class=\"built_in\">int</span>(size.find(<span class=\"string\">&#x27;width&#x27;</span>).text)</span><br><span class=\"line\">    h = <span class=\"built_in\">int</span>(size.find(<span class=\"string\">&#x27;height&#x27;</span>).text)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> root.<span class=\"built_in\">iter</span>(<span class=\"string\">&#x27;object&#x27;</span>):</span><br><span class=\"line\">        difficult = obj.find(<span class=\"string\">&#x27;difficult&#x27;</span>).text</span><br><span class=\"line\">        cls = obj.find(<span class=\"string\">&#x27;name&#x27;</span>).text</span><br><span class=\"line\">        <span class=\"keyword\">if</span> cls <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> classes <span class=\"keyword\">or</span> <span class=\"built_in\">int</span>(difficult) == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        cls_id = classes.index(cls)</span><br><span class=\"line\">        xmlbox = obj.find(<span class=\"string\">&#x27;bndbox&#x27;</span>)</span><br><span class=\"line\">        b = (<span class=\"built_in\">float</span>(xmlbox.find(<span class=\"string\">&#x27;xmin&#x27;</span>).text), <span class=\"built_in\">float</span>(xmlbox.find(<span class=\"string\">&#x27;xmax&#x27;</span>).text), <span class=\"built_in\">float</span>(xmlbox.find(<span class=\"string\">&#x27;ymin&#x27;</span>).text),</span><br><span class=\"line\">             <span class=\"built_in\">float</span>(xmlbox.find(<span class=\"string\">&#x27;ymax&#x27;</span>).text))</span><br><span class=\"line\">        bb = convert((w, h), b)</span><br><span class=\"line\">        out_file.write(<span class=\"built_in\">str</span>(cls_id) + <span class=\"string\">&quot; &quot;</span> + <span class=\"string\">&quot; &quot;</span>.join([<span class=\"built_in\">str</span>(a) <span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> bb]) + <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">wd = getcwd()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(wd)</span><br><span class=\"line\"><span class=\"keyword\">for</span> image_set <span class=\"keyword\">in</span> sets:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(<span class=\"string\">&#x27;data/labels/&#x27;</span>):</span><br><span class=\"line\">        os.makedirs(<span class=\"string\">&#x27;data/labels/&#x27;</span>)</span><br><span class=\"line\">    image_ids = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;data/ImageSets/%s.txt&#x27;</span> % image_set).read().strip().split()</span><br><span class=\"line\">    list_file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;data/%s.txt&#x27;</span> % image_set, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> image_id <span class=\"keyword\">in</span> image_ids:</span><br><span class=\"line\">        list_file.write(<span class=\"string\">&#x27;data/images/%s.png\\n&#x27;</span> % image_id)</span><br><span class=\"line\">        convert_annotation(image_id)</span><br><span class=\"line\">    list_file.close()</span><br></pre></td></tr></table></figure>\n<div class=\"note info no-icon flat\"><p>运行完成后会在data&#x2F;label中看到做好的标签文件，并且在data文件下出现了train、val、test的txt文件，保存了图片的路径</p>\n</div>\n<img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h4459bvkr4j30qa04vwkk.jpg\" alt=\"test.png\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h445a78m6kj302q01rmx5.jpg\" alt=\"image.png\"></li>\n</ul>\n<p>至此我们训练前期的准备工作差不多已经做完了</p>\n<h3 id=\"调整参数\"><a href=\"#调整参数\" class=\"headerlink\" title=\"调整参数\"></a>调整参数</h3><p>接下来需要简单的修改一下配置，就可以开始我们的训练了</p>\n<ol>\n<li>进入到data文件下，修改coco.yaml文件</li>\n</ol>\n<p><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h4493scqutj30nx030jun.jpg\" alt=\"image.png\"></p>\n<ul>\n<li><code>path</code> 为train.txt 、 val.txt与test.txt所在的路径，绝对路径与相对路径均可</li>\n</ul>\n<p><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h4495wnn78j306o01sgly.jpg\" alt=\"image.png\"></p>\n<ul>\n<li><code>nc</code> 为标记种类数，这里我们按照实际标记的种类数进行修改</li>\n<li><code>names</code> 把所有标记的种类写入进来</li>\n</ul>\n<ol start=\"2\">\n<li>进入models文件夹，修改五个模型中任意即可</li>\n</ol>\n<p><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h44993v12ij303702qt91.jpg\" alt=\"image.png\"></p>\n<ul>\n<li><code>nc</code> 为标记种类数，这里我们按照实际标记的种类数进行修改</li>\n</ul>\n<ol start=\"3\">\n<li>进入根目录，修改train.py文件<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h46awu34mbj30qo05ngtk.jpg\" alt=\"image.png\"><br><code>weights</code>，<code>yaml</code>，<code>data</code>按照自己所需文件的路径修改即可 epochs迭代次数自己决定，我这里仅用100次进行测试 batch-size过高可能会影响电脑运行速度，还是要根据自己电脑硬件条件决定增加还是减少 修改完成，运行即可！</li>\n</ol>\n<h3 id=\"开始训练\"><a href=\"#开始训练\" class=\"headerlink\" title=\"开始训练\"></a>开始训练</h3><p>激动人心的时刻即将到来，在yolov5根目录运行<code>python  train.py</code>，即可看到训练已经开始了。如果运行异常，则需要反查自己的环境以及配置的路径是否有误。<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h46e9u1ervj30u10c6nc1.jpg\" alt=\"image.png\"></p>\n<p>训练程序正常后可以在根目录运行<code>tensorboard --logdir runs/train</code>， 然后在浏览器打开<code>localhost:6006</code>观察，效果如下<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h46egunvn4j30sj0jvdln.jpg\" alt=\"image.png\"></p>\n<h3 id=\"结束训练\"><a href=\"#结束训练\" class=\"headerlink\" title=\"结束训练\"></a>结束训练</h3><p>漫长的等待之后，训练结束<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h46gw2qzdjj30uh07ik0c.jpg\" alt=\"image.png\"><br>可以看到文件夹里躺着训练结果<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h46gyatsmpj30s208o0y2.jpg\" alt=\"image.png\"><br>weights里面静静躺着训练出的模型文件<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h46gzrer13j30h501gq39.jpg\" alt=\"image.png\"></p>\n<h3 id=\"验证结果\"><a href=\"#验证结果\" class=\"headerlink\" title=\"验证结果\"></a>验证结果</h3><p>训练结束之后就需要测试我们的模型识别成功率如何，使用根目录下<code>detect.py</code>文件来测试，但是还需要指定一些内容，有以下几种方式可以实现</p>\n<ol>\n<li>命令行运行<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python detect.py --weights runs/train/exp17/weights/best.pt --<span class=\"built_in\">source</span> data/Samples/ --device cpu</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>weights</code> 为最终训练出来的模型<br><code>source</code> 为测试图片存放位置<br><code>device</code> 为加载模型使用的设备</p>\n</blockquote>\n</li>\n<li>pycharm中指定参数<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h46jjh1ykgj30pk0epq7m.jpg\" alt=\"image.png\"><blockquote>\n<p>在pycharm的配置中添加参数，直接运行即可</p>\n</blockquote>\n</li>\n</ol>\n<p>运行结束后会在<code>yolov5\\runs\\detect</code>路径中查看识别结果，可以看到识别准确率还是非常高的，至此我们的目标识别这一部分就做完了<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h46jx9pmlpj30i903ywgj.jpg\" alt=\"image.png\"></p>\n<h2 id=\"小图切割\"><a href=\"#小图切割\" class=\"headerlink\" title=\"小图切割\"></a>小图切割</h2><p>当大图的训练结束之后，则需要处理小图了。在大量观察后发现小图均有一定的规律，提示要点击的文字均处在同一位置上，那么我们就可以通过最简单的方法：直接指定像素进行图片切割来快速提取出来需要点击的文字<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h46kmrmjjxj30q409q462.jpg\" alt=\"image.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">splitimage</span>(<span class=\"params\">img</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 小图切割</span></span><br><span class=\"line\">    coordinates_list = [<span class=\"number\">149</span>, <span class=\"number\">192</span>, <span class=\"number\">235</span>]  <span class=\"comment\"># 需要切割的像素位置</span></span><br><span class=\"line\">    result = <span class=\"built_in\">list</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index, x <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(coordinates_list):</span><br><span class=\"line\">        box = (x, <span class=\"number\">1</span>, x + <span class=\"number\">26</span>, <span class=\"number\">28</span>)</span><br><span class=\"line\">        small_pic = img.crop(box)</span><br><span class=\"line\">        result.append(small_pic)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">big_img_dir = <span class=\"string\">r&#x27;.\\yolov5\\data\\images&#x27;</span>  <span class=\"comment\"># 大图所在路径</span></span><br><span class=\"line\">yolo_img_list = os.listdir(big_img_dir)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> img_name <span class=\"keyword\">in</span> yolo_img_list:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(img_name)</span><br><span class=\"line\"></span><br><span class=\"line\">    img_name = img_name.split(<span class=\"string\">&#x27;.&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    cut_img_list = splitimage(Image.<span class=\"built_in\">open</span>(<span class=\"string\">fr&#x27;small_img/<span class=\"subst\">&#123;img_name&#125;</span>.png&#x27;</span>))  <span class=\"comment\"># 与大图对应的小图进行切割</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(<span class=\"string\">f&#x27;./small_img_cut/<span class=\"subst\">&#123;img_name&#125;</span>&#x27;</span>):</span><br><span class=\"line\">        os.makedirs(<span class=\"string\">f&#x27;./small_img_cut/<span class=\"subst\">&#123;img_name&#125;</span>&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> index, cut_img <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(cut_img_list):</span><br><span class=\"line\">        cut_img.save(<span class=\"string\">f&#x27;./small_img_cut/<span class=\"subst\">&#123;img_name&#125;</span>/<span class=\"subst\">&#123;index&#125;</span>.png&#x27;</span>)  <span class=\"comment\"># 切割后图片保存</span></span><br></pre></td></tr></table></figure>\n<p>运行结束后可以看到每个小图已经切割成功，并单独存入单独的文件夹内<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h47eihrabnj30860c778e.jpg\" alt=\"image.png\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h47eisgj0lj309603rt8r.jpg\" alt=\"image.png\"><br>那么这一步小图也处理完成，仅仅剩下最后一步就可以完成识别了</p>\n<h2 id=\"孪生网络相似度训练\"><a href=\"#孪生网络相似度训练\" class=\"headerlink\" title=\"孪生网络相似度训练\"></a>孪生网络相似度训练</h2><h3 id=\"孪生网络简介\"><a href=\"#孪生网络简介\" class=\"headerlink\" title=\"孪生网络简介\"></a>孪生网络简介</h3><p>这里就不过多介绍了，可以直接去大佬github中详细学习<a href=\"https://github.com/bubbliiiing/Siamese-keras\">点击进入</a></p>\n<h3 id=\"数据集制作-1\"><a href=\"#数据集制作-1\" class=\"headerlink\" title=\"数据集制作\"></a>数据集制作</h3><p>这里我对yolov5中的detect.py进行了小小的改动，将识别出来的大图放入到之前切割好的小图中，方便我们后续操作<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h47r3g7i0oj30po04rdhy.jpg\" alt=\"image.png\"><br>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> utils.augmentations <span class=\"keyword\">import</span> letterbox</span><br><span class=\"line\"><span class=\"keyword\">from</span> models.common <span class=\"keyword\">import</span> DetectMultiBackend</span><br><span class=\"line\"><span class=\"keyword\">from</span> utils.general <span class=\"keyword\">import</span> check_img_size, non_max_suppression, scale_coords</span><br><span class=\"line\"><span class=\"keyword\">from</span> utils.plots <span class=\"keyword\">import</span> save_one_box</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Detect</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,</span></span><br><span class=\"line\"><span class=\"params\">                 weights=<span class=\"string\">&#x27;weights/best.pt&#x27;</span>,  <span class=\"comment\"># model.pt path(s)</span></span></span><br><span class=\"line\"><span class=\"params\">                 source=<span class=\"string\">&#x27;data/Samples&#x27;</span>,  <span class=\"comment\"># file/dir/URL/glob, 0 for webcam</span></span></span><br><span class=\"line\"><span class=\"params\">                 data=<span class=\"string\">&#x27;data/coco128.yaml&#x27;</span>,  <span class=\"comment\"># dataset.yaml path</span></span></span><br><span class=\"line\"><span class=\"params\">                 imgsz=(<span class=\"params\"><span class=\"number\">640</span>, <span class=\"number\">640</span></span>),  <span class=\"comment\"># inference size (height, width)</span></span></span><br><span class=\"line\"><span class=\"params\">                 project=<span class=\"string\">&#x27;runs/detect&#x27;</span>,  <span class=\"comment\"># save results to project/name</span></span></span><br><span class=\"line\"><span class=\"params\">                 </span>):</span><br><span class=\"line\">        self.source = <span class=\"built_in\">str</span>(source)</span><br><span class=\"line\">        self.weights = weights</span><br><span class=\"line\">        self.data = data</span><br><span class=\"line\">        self.imgsz = imgsz</span><br><span class=\"line\"></span><br><span class=\"line\">        self.model = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.save_dir = Path(project)  <span class=\"comment\"># increment run</span></span><br><span class=\"line\">        self.save_dir.mkdir(parents=<span class=\"literal\">True</span>, exist_ok=<span class=\"literal\">True</span>)  <span class=\"comment\"># make dir</span></span><br><span class=\"line\">        self.load_model()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">load_model</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.model = DetectMultiBackend(self.weights, data=self.data)</span><br><span class=\"line\">        stride, names, pt = self.model.stride, self.model.names, self.model.pt</span><br><span class=\"line\">        imgsz = check_img_size(self.imgsz, s=stride)  <span class=\"comment\"># check image size</span></span><br><span class=\"line\">        bs = <span class=\"number\">1</span>  <span class=\"comment\"># batch_size</span></span><br><span class=\"line\">        self.model.warmup(imgsz=(<span class=\"number\">1</span> <span class=\"keyword\">if</span> pt <span class=\"keyword\">else</span> bs, <span class=\"number\">3</span>, *imgsz))  <span class=\"comment\"># warmup</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">identify</span>(<span class=\"params\">self, pic_path</span>):</span><br><span class=\"line\">        im0s = cv2.imread(pic_path)</span><br><span class=\"line\">        img = letterbox(im0s)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        img = img.transpose((<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>))[::-<span class=\"number\">1</span>]  <span class=\"comment\"># HWC to CHW, BGR to RGB</span></span><br><span class=\"line\">        im = np.ascontiguousarray(img)</span><br><span class=\"line\">        im = torch.from_numpy(im).to().<span class=\"built_in\">float</span>()</span><br><span class=\"line\">        im /= <span class=\"number\">255</span>  <span class=\"comment\"># 0 - 255 to 0.0 - 1.0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(im.shape) == <span class=\"number\">3</span>:</span><br><span class=\"line\">            im = im[<span class=\"literal\">None</span>]  <span class=\"comment\"># expand for batch dim</span></span><br><span class=\"line\"></span><br><span class=\"line\">        pred = self.model(im)</span><br><span class=\"line\">        pred = non_max_suppression(pred)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, det <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(pred):  <span class=\"comment\"># per image</span></span><br><span class=\"line\">            im0 = im0s.copy()</span><br><span class=\"line\"></span><br><span class=\"line\">            p = Path(pic_path)  <span class=\"comment\"># to Path</span></span><br><span class=\"line\">            imc = im0.copy()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(det):</span><br><span class=\"line\">                det[:, :<span class=\"number\">4</span>] = scale_coords(im.shape[<span class=\"number\">2</span>:], det[:, :<span class=\"number\">4</span>], im0.shape).<span class=\"built_in\">round</span>()</span><br><span class=\"line\">                <span class=\"keyword\">for</span> *xyxy, conf, cls <span class=\"keyword\">in</span> <span class=\"built_in\">reversed</span>(det):</span><br><span class=\"line\">                    save_file_path = Path(<span class=\"string\">r&#x27;E:\\blog\\deep_learn\\small_img_cut&#x27;</span>) / p.stem / <span class=\"string\">f&#x27;<span class=\"subst\">&#123;p.stem&#125;</span>.jpg&#x27;</span></span><br><span class=\"line\">                    save_one_box(xyxy, imc, file=save_file_path, BGR=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    <span class=\"comment\"># print([i.cpu().detach().numpy().tolist() for i in xyxy])</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> os</span><br><span class=\"line\">    test = Detect()</span><br><span class=\"line\"></span><br><span class=\"line\">    pic_list = os.listdir(<span class=\"string\">r&#x27;E:\\blog\\deep_learn\\yolov5\\data\\images&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> pic <span class=\"keyword\">in</span> pic_list:</span><br><span class=\"line\">        test.identify(<span class=\"string\">fr&#x27;E:\\blog\\deep_learn\\big_img\\&#123;pic&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>接下来需要将相同的文字都放入到一个单独的文件夹内，为了能够快速处理，可以使用一下代码实现。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> tkinter</span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">FILE = Path(__file__).resolve()</span><br><span class=\"line\">ROOT = FILE.parents[<span class=\"number\">0</span>]</span><br><span class=\"line\">ROOT = Path(os.path.relpath(ROOT, Path.cwd()))</span><br><span class=\"line\">root = tkinter.Tk()</span><br><span class=\"line\">root.title(<span class=\"string\">&quot;Preview&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">num = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">image_Splicing</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> big_pic <span class=\"keyword\">in</span> data[<span class=\"string\">&#x27;big_pic_path&#x27;</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> small_pic <span class=\"keyword\">in</span> data[<span class=\"string\">&#x27;small_pic_path&#x27;</span>]:</span><br><span class=\"line\"></span><br><span class=\"line\">            cv2.namedWindow(<span class=\"string\">&#x27;Face&#x27;</span>, <span class=\"number\">0</span>)  <span class=\"comment\"># 创建一个名为“Face”的窗口用于显示图像</span></span><br><span class=\"line\">            cv2.moveWindow(<span class=\"string\">&#x27;Face&#x27;</span>, <span class=\"number\">100</span>, <span class=\"number\">50</span>)  <span class=\"comment\"># 移动窗口到适当位置</span></span><br><span class=\"line\">            cv2.resizeWindow(<span class=\"string\">&#x27;Face&#x27;</span>, <span class=\"number\">350</span>, <span class=\"number\">175</span>)</span><br><span class=\"line\">            img1 = cv2.imread(<span class=\"built_in\">str</span>(big_pic))</span><br><span class=\"line\">            img2 = cv2.imread(<span class=\"built_in\">str</span>(small_pic))</span><br><span class=\"line\"></span><br><span class=\"line\">            img1 = cv2.resize(img1, (<span class=\"number\">640</span>, <span class=\"number\">640</span>))</span><br><span class=\"line\">            img2 = cv2.resize(img2, (<span class=\"number\">640</span>, <span class=\"number\">640</span>))</span><br><span class=\"line\">            new_img = np.hstack([img1, img2])</span><br><span class=\"line\">            cv2.imshow(<span class=\"string\">&#x27;Face&#x27;</span>, new_img)  <span class=\"comment\"># 显示图像</span></span><br><span class=\"line\">            cv2.waitKey(<span class=\"number\">100</span>)  <span class=\"comment\"># 设置显示时间，1000ms</span></span><br><span class=\"line\">            judge = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;是否相同：&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> judge:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(big_pic, small_pic)</span><br><span class=\"line\">                tag_pic(big_pic, small_pic)</span><br><span class=\"line\">                data[<span class=\"string\">&#x27;big_pic_path&#x27;</span>].remove(big_pic)</span><br><span class=\"line\">                data[<span class=\"string\">&#x27;small_pic_path&#x27;</span>].remove(small_pic)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> image_Splicing(data)</span><br><span class=\"line\"></span><br><span class=\"line\">            cv2.destroyWindow(<span class=\"string\">&#x27;Face&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_pic_list</span>():</span><br><span class=\"line\">    pic_id_list = os.listdir(Path(ROOT / <span class=\"string\">&#x27;small_img_cut&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> pic_id <span class=\"keyword\">in</span> pic_id_list:</span><br><span class=\"line\">        pic_list = os.listdir(Path(ROOT / <span class=\"string\">&#x27;small_img_cut&#x27;</span> / pic_id))</span><br><span class=\"line\">        data = &#123;<span class=\"string\">&#x27;pic_id&#x27;</span>: pic_id, <span class=\"string\">&#x27;small_pic_path&#x27;</span>: [], <span class=\"string\">&#x27;big_pic_path&#x27;</span>: []&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> pic <span class=\"keyword\">in</span> pic_list:</span><br><span class=\"line\">            pic_path = Path(ROOT / <span class=\"string\">&#x27;small_img_cut&#x27;</span> / pic_id / pic)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(pic_path.stem) &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">                data[<span class=\"string\">&#x27;small_pic_path&#x27;</span>].append(pic_path)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                data[<span class=\"string\">&#x27;big_pic_path&#x27;</span>].append(pic_path)</span><br><span class=\"line\">        image_Splicing(data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hash</span>():</span><br><span class=\"line\">    time12 = <span class=\"built_in\">int</span>(time.time() * <span class=\"number\">1000</span>)</span><br><span class=\"line\">    rand04 = random.randint(<span class=\"number\">1000</span>, <span class=\"number\">9999</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> md5(<span class=\"built_in\">str</span>(time12) + <span class=\"built_in\">str</span>(rand04))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">md5</span>(<span class=\"params\">*arg</span>):</span><br><span class=\"line\">    hl = hashlib.md5()</span><br><span class=\"line\">    line = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x: <span class=\"built_in\">str</span>(x), arg)))</span><br><span class=\"line\">    hl.update(line.encode(encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hl.hexdigest()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tag_pic</span>(<span class=\"params\">big_pic, small_pic</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> num</span><br><span class=\"line\">    path = <span class=\"string\">f&#x27;./Siamese-pytorch/datasets/images_background/pic<span class=\"subst\">&#123;num&#125;</span>&#x27;</span></span><br><span class=\"line\">    num += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(path):</span><br><span class=\"line\">        os.mkdir(path)</span><br><span class=\"line\"></span><br><span class=\"line\">    big_file = <span class=\"built_in\">open</span>(big_pic, <span class=\"string\">&quot;rb&quot;</span>)</span><br><span class=\"line\">    big_data = big_file.read()</span><br><span class=\"line\">    big_file.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">        new_file = <span class=\"built_in\">open</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;path&#125;</span>/<span class=\"subst\">&#123;<span class=\"built_in\">hash</span>()&#125;</span>.jpg&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>)</span><br><span class=\"line\">        new_file.write(big_data)</span><br><span class=\"line\">        new_file.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    small_file = <span class=\"built_in\">open</span>(small_pic, <span class=\"string\">&quot;rb&quot;</span>)</span><br><span class=\"line\">    small_data = small_file.read()</span><br><span class=\"line\">    small_file.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">        new_file = <span class=\"built_in\">open</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;path&#125;</span>/<span class=\"subst\">&#123;<span class=\"built_in\">hash</span>()&#125;</span>.jpg&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>)</span><br><span class=\"line\">        new_file.write(small_data)</span><br><span class=\"line\">        new_file.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    get_pic_list()</span><br></pre></td></tr></table></figure>\n<p>运行以上代码后可以看到会显示以下图片<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h4ce2aod6yj309s05raav.jpg\" alt=\"image.png\"><br>并且在控制台会有以下内容<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h4ce33kqxzj302t01d0sl.jpg\" alt=\"image.png\"><br>接下来只需要动动自己那发财的小手，如果相同则输入<code>1</code>后回车，如果不相同则直接回车。 就可以看到datasets中开始保存相同的文字图片了<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h4d6854b5yj30ry08in12.jpg\" alt=\"image.png\"><br>接下来的开始训练，结束训练以及验证结果均可以查看大佬的github进行操作，这里直接说结果，可以看到识别准确率还是很高的</p>\n<p><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h4d6p2ylhnj30gk0aa41t.jpg\" alt=\"image.png\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h4d6pcl6d1j30gv09f41s.jpg\" alt=\"image.png\"></p>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>最后只需要将两个识别方法进行拼接，并删除掉不相关代码，即可实现识别对应问题或图形，也可通过flask来实现接口调用</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>根据提示依次点击对应文字或图形完成验证。</p>\n<p><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h3zumbwf57j30o60et440.jpg\" alt=\"test.png\"></p>\n<p>这种验证码由于按照提示顺序进行点击，故不需识别出准确的文字。本文以WPH为例子，只记录使用小图切割+YOLOV5目标识别+相似度来返回指定坐标</p>\n<p><code>url: aHR0cHM6Ly9wYXNzcG9ydC52aXAuY29tL2xvZ2luP3NyYz1odHRwcyUzQSUyRiUyRnd3dy52aXAuY29tJTJG</code></p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>直接上selenium简单粗暴，从网站上下载一些图片为后续工作做准备</p>\n<p><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h40hicq5f7j30n50620w0.jpg\" alt=\"test.png\"></p>\n<p><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h40hizuusqj30nk056tb1.jpg\" alt=\"test.png\"></p>\n<h2 id=\"YOLO目标识别\"><a href=\"#YOLO目标识别\" class=\"headerlink\" title=\"YOLO目标识别\"></a>YOLO目标识别</h2><h3 id=\"YOLO简介\"><a href=\"#YOLO简介\" class=\"headerlink\" title=\"YOLO简介\"></a>YOLO简介</h3><p>下载yoloV5（<a href=\"https://github.com/ultralytics/yolov5\">点击进入github</a>），或使用<code>Git Bash</code>在指定文件夹目录下输入下面命令行获取：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/ultralytics/yolov5.git</span><br></pre></td></tr></table></figure>\n<p>下载好之后进入yolov5根目录，运行<code>pip install -r requirements.txt</code>安装环境<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h43ypy4kryj305h0ag0v5.jpg\" alt=\"test.png\"></p>\n<blockquote>\n<p>项目文件结构简单说明：<br><code>data</code> 主要放置相关训练数据的配置文件（读取、解析等）<br><code>models</code> 放置各模型的参数配置文件<br><code>weights</code> 放置预训练模型的权重文件<br><code>inference</code> 放置预测&#x2F;推理阶段的测试图片<br><code>runs</code> 放置训练过程中保留下来的一些数据（运行后自动创建）</p>\n</blockquote>\n<h3 id=\"图片标注\"><a href=\"#图片标注\" class=\"headerlink\" title=\"图片标注\"></a>图片标注</h3><p>下载labelimg可视化图形标定工具（<a href=\"https://tzutalin.github.io/labelImg/\">点击下载</a>），Faster R-CNN，YOLO，SSD等目标检测网络所需要的数据集，均需要借此工具标定图像中的目标。生成的 XML 文件是遵循 PASCAL VOC 的格式的。软件打开界面如下：</p>\n<div class=\"note info flat\"><p>labelimg一定要放到全英文路径下，否则会报错 </p>\n</div>\n<p>软件打开界面如下：<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h40i6f6385j30vr0madol.jpg\" alt=\"test.png\"><br>软件功能介绍：</p>\n<blockquote>\n<p>按键功能介绍<br>在labelImg窗口的左边功能键介绍:<br>“Open”是打开单个图像，<br>“Open Dir” 打开文件夹，<br>“Change Save Dir” xml标注文件保存的路径，<br>“Next Image” 切换到下一张图像，<br>“Prev Image”切换到上一张图像，<br>“Verify Image”校验图像，<br>“Save”保存图像，<br>“Create RectBox”画标注框一个，<br>“Duplicate RectBox”重复标注框，<br>“Delete RectBox”删除标注框，<br>“Zoom In” 放大图像，<br>“Zoom Out” 缩小图像，<br>“Fit Window”图像适用窗口，<br>“Fit Width”图像适应宽度。<br>一组快捷键：<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h40i8py03vj30jd0ddwhx.jpg\" alt=\"test.png\"><br>过程<br>一般操作的顺序：单张图片的：<br>“open file ” —–”create rectbox “ —–”输入类别名称 “—–“change save dir ”—–”Save”<br>如果多张图片可以open dir先打开一个文件夹，然后change save dir 选择需要存储的文件夹，其余操作如上，保存后即可Next Image跳下一张。<br>最后在保存文件的路径下生成.xml文件，.xml文件的名字是和标注照片的名字一样，如果要修改已经标注过的图像，.xml中的信息也会随之改变。<br>得到的.xml 和PASCAL VOC所用格式相同。</p>\n</blockquote>\n<p>下图则是标记好的实例数据，这里我将所有的文字都标记成了同一个label<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h40zkqhjsvj30fx0ui7c7.jpg\" alt=\"test.png\"></p>\n<h3 id=\"数据集制作\"><a href=\"#数据集制作\" class=\"headerlink\" title=\"数据集制作\"></a>数据集制作</h3><h4 id=\"图片数据集\"><a href=\"#图片数据集\" class=\"headerlink\" title=\"图片数据集\"></a>图片数据集</h4><ul>\n<li>将所有的图片放到<code>JPEGImages</code>文件夹下，在根目录下创建make_txt.py文件，代码如下，运行代码后<code>ImageSets</code>中生成数据集分类txt文件<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\">trainval_percent = <span class=\"number\">0.1</span></span><br><span class=\"line\">train_percent = <span class=\"number\">0.9</span></span><br><span class=\"line\">xmlfilepath = <span class=\"string\">&#x27;data/Annotations&#x27;</span></span><br><span class=\"line\">txtsavepath = <span class=\"string\">&#x27;data/ImageSets&#x27;</span></span><br><span class=\"line\">total_xml = os.listdir(xmlfilepath)</span><br><span class=\"line\">num = <span class=\"built_in\">len</span>(total_xml)</span><br><span class=\"line\"><span class=\"built_in\">list</span> = <span class=\"built_in\">range</span>(num)</span><br><span class=\"line\">tv = <span class=\"built_in\">int</span>(num * trainval_percent)</span><br><span class=\"line\">tr = <span class=\"built_in\">int</span>(tv * train_percent)</span><br><span class=\"line\">trainval = random.sample(<span class=\"built_in\">list</span>, tv)</span><br><span class=\"line\">train = random.sample(trainval, tr)</span><br><span class=\"line\">ftrainval = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;data/ImageSets/trainval.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">ftest = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;data/ImageSets/test.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">ftrain = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;data/ImageSets/train.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">fval = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;data/ImageSets/val.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">list</span>:</span><br><span class=\"line\">    name = total_xml[i][:-<span class=\"number\">4</span>] + <span class=\"string\">&#x27;\\n&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> trainval:</span><br><span class=\"line\">        ftrainval.write(name)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> train:</span><br><span class=\"line\">            ftest.write(name)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            fval.write(name)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        ftrain.write(name)</span><br><span class=\"line\">ftrainval.close()</span><br><span class=\"line\">ftrain.close()</span><br><span class=\"line\">fval.close()</span><br><span class=\"line\">ftest.close()</span><br></pre></td></tr></table></figure>\n<div class=\"note info no-icon flat\"><p>运行完成后会在ImageSets中看到做好的数据集分类</p>\n</div>\n<img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h443bznu3lj303f02rglu.jpg\" alt=\"test.png\"></li>\n</ul>\n<h4 id=\"标记数据集\"><a href=\"#标记数据集\" class=\"headerlink\" title=\"标记数据集\"></a>标记数据集</h4><ul>\n<li>将所有个pascal-voc格式的xml文件放入到Annotations文件夹下，根目录下创建 voc_label.py 文件，代码如下。需要注意的是，sets中改为你的sets的名字（make_txt生成的） classes修改为你需要检测的类别，在本案例中，我们只需要检测一种类别<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> xml.etree.ElementTree <span class=\"keyword\">as</span> ET</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> os <span class=\"keyword\">import</span> getcwd</span><br><span class=\"line\"></span><br><span class=\"line\">sets = [<span class=\"string\">&#x27;train&#x27;</span>, <span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;val&#x27;</span>]</span><br><span class=\"line\">classes = [<span class=\"string\">&#x27;1&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">convert</span>(<span class=\"params\">size, box</span>):</span><br><span class=\"line\">    dw = <span class=\"number\">1.</span> / size[<span class=\"number\">0</span>]</span><br><span class=\"line\">    dh = <span class=\"number\">1.</span> / size[<span class=\"number\">1</span>]</span><br><span class=\"line\">    x = (box[<span class=\"number\">0</span>] + box[<span class=\"number\">1</span>]) / <span class=\"number\">2.0</span></span><br><span class=\"line\">    y = (box[<span class=\"number\">2</span>] + box[<span class=\"number\">3</span>]) / <span class=\"number\">2.0</span></span><br><span class=\"line\">    w = box[<span class=\"number\">1</span>] - box[<span class=\"number\">0</span>]</span><br><span class=\"line\">    h = box[<span class=\"number\">3</span>] - box[<span class=\"number\">2</span>]</span><br><span class=\"line\">    x = x * dw</span><br><span class=\"line\">    w = w * dw</span><br><span class=\"line\">    y = y * dh</span><br><span class=\"line\">    h = h * dh</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x, y, w, h</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">convert_annotation</span>(<span class=\"params\">image_id</span>):</span><br><span class=\"line\">    in_file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;data/Annotations/%s.xml&#x27;</span> % image_id)</span><br><span class=\"line\">    out_file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;data/labels/%s.txt&#x27;</span> % image_id, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">    tree = ET.parse(in_file)</span><br><span class=\"line\">    root = tree.getroot()</span><br><span class=\"line\">    size = root.find(<span class=\"string\">&#x27;size&#x27;</span>)</span><br><span class=\"line\">    w = <span class=\"built_in\">int</span>(size.find(<span class=\"string\">&#x27;width&#x27;</span>).text)</span><br><span class=\"line\">    h = <span class=\"built_in\">int</span>(size.find(<span class=\"string\">&#x27;height&#x27;</span>).text)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> root.<span class=\"built_in\">iter</span>(<span class=\"string\">&#x27;object&#x27;</span>):</span><br><span class=\"line\">        difficult = obj.find(<span class=\"string\">&#x27;difficult&#x27;</span>).text</span><br><span class=\"line\">        cls = obj.find(<span class=\"string\">&#x27;name&#x27;</span>).text</span><br><span class=\"line\">        <span class=\"keyword\">if</span> cls <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> classes <span class=\"keyword\">or</span> <span class=\"built_in\">int</span>(difficult) == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        cls_id = classes.index(cls)</span><br><span class=\"line\">        xmlbox = obj.find(<span class=\"string\">&#x27;bndbox&#x27;</span>)</span><br><span class=\"line\">        b = (<span class=\"built_in\">float</span>(xmlbox.find(<span class=\"string\">&#x27;xmin&#x27;</span>).text), <span class=\"built_in\">float</span>(xmlbox.find(<span class=\"string\">&#x27;xmax&#x27;</span>).text), <span class=\"built_in\">float</span>(xmlbox.find(<span class=\"string\">&#x27;ymin&#x27;</span>).text),</span><br><span class=\"line\">             <span class=\"built_in\">float</span>(xmlbox.find(<span class=\"string\">&#x27;ymax&#x27;</span>).text))</span><br><span class=\"line\">        bb = convert((w, h), b)</span><br><span class=\"line\">        out_file.write(<span class=\"built_in\">str</span>(cls_id) + <span class=\"string\">&quot; &quot;</span> + <span class=\"string\">&quot; &quot;</span>.join([<span class=\"built_in\">str</span>(a) <span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> bb]) + <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">wd = getcwd()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(wd)</span><br><span class=\"line\"><span class=\"keyword\">for</span> image_set <span class=\"keyword\">in</span> sets:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(<span class=\"string\">&#x27;data/labels/&#x27;</span>):</span><br><span class=\"line\">        os.makedirs(<span class=\"string\">&#x27;data/labels/&#x27;</span>)</span><br><span class=\"line\">    image_ids = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;data/ImageSets/%s.txt&#x27;</span> % image_set).read().strip().split()</span><br><span class=\"line\">    list_file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;data/%s.txt&#x27;</span> % image_set, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> image_id <span class=\"keyword\">in</span> image_ids:</span><br><span class=\"line\">        list_file.write(<span class=\"string\">&#x27;data/images/%s.png\\n&#x27;</span> % image_id)</span><br><span class=\"line\">        convert_annotation(image_id)</span><br><span class=\"line\">    list_file.close()</span><br></pre></td></tr></table></figure>\n<div class=\"note info no-icon flat\"><p>运行完成后会在data&#x2F;label中看到做好的标签文件，并且在data文件下出现了train、val、test的txt文件，保存了图片的路径</p>\n</div>\n<img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h4459bvkr4j30qa04vwkk.jpg\" alt=\"test.png\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h445a78m6kj302q01rmx5.jpg\" alt=\"image.png\"></li>\n</ul>\n<p>至此我们训练前期的准备工作差不多已经做完了</p>\n<h3 id=\"调整参数\"><a href=\"#调整参数\" class=\"headerlink\" title=\"调整参数\"></a>调整参数</h3><p>接下来需要简单的修改一下配置，就可以开始我们的训练了</p>\n<ol>\n<li>进入到data文件下，修改coco.yaml文件</li>\n</ol>\n<p><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h4493scqutj30nx030jun.jpg\" alt=\"image.png\"></p>\n<ul>\n<li><code>path</code> 为train.txt 、 val.txt与test.txt所在的路径，绝对路径与相对路径均可</li>\n</ul>\n<p><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h4495wnn78j306o01sgly.jpg\" alt=\"image.png\"></p>\n<ul>\n<li><code>nc</code> 为标记种类数，这里我们按照实际标记的种类数进行修改</li>\n<li><code>names</code> 把所有标记的种类写入进来</li>\n</ul>\n<ol start=\"2\">\n<li>进入models文件夹，修改五个模型中任意即可</li>\n</ol>\n<p><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h44993v12ij303702qt91.jpg\" alt=\"image.png\"></p>\n<ul>\n<li><code>nc</code> 为标记种类数，这里我们按照实际标记的种类数进行修改</li>\n</ul>\n<ol start=\"3\">\n<li>进入根目录，修改train.py文件<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h46awu34mbj30qo05ngtk.jpg\" alt=\"image.png\"><br><code>weights</code>，<code>yaml</code>，<code>data</code>按照自己所需文件的路径修改即可 epochs迭代次数自己决定，我这里仅用100次进行测试 batch-size过高可能会影响电脑运行速度，还是要根据自己电脑硬件条件决定增加还是减少 修改完成，运行即可！</li>\n</ol>\n<h3 id=\"开始训练\"><a href=\"#开始训练\" class=\"headerlink\" title=\"开始训练\"></a>开始训练</h3><p>激动人心的时刻即将到来，在yolov5根目录运行<code>python  train.py</code>，即可看到训练已经开始了。如果运行异常，则需要反查自己的环境以及配置的路径是否有误。<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h46e9u1ervj30u10c6nc1.jpg\" alt=\"image.png\"></p>\n<p>训练程序正常后可以在根目录运行<code>tensorboard --logdir runs/train</code>， 然后在浏览器打开<code>localhost:6006</code>观察，效果如下<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h46egunvn4j30sj0jvdln.jpg\" alt=\"image.png\"></p>\n<h3 id=\"结束训练\"><a href=\"#结束训练\" class=\"headerlink\" title=\"结束训练\"></a>结束训练</h3><p>漫长的等待之后，训练结束<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h46gw2qzdjj30uh07ik0c.jpg\" alt=\"image.png\"><br>可以看到文件夹里躺着训练结果<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h46gyatsmpj30s208o0y2.jpg\" alt=\"image.png\"><br>weights里面静静躺着训练出的模型文件<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h46gzrer13j30h501gq39.jpg\" alt=\"image.png\"></p>\n<h3 id=\"验证结果\"><a href=\"#验证结果\" class=\"headerlink\" title=\"验证结果\"></a>验证结果</h3><p>训练结束之后就需要测试我们的模型识别成功率如何，使用根目录下<code>detect.py</code>文件来测试，但是还需要指定一些内容，有以下几种方式可以实现</p>\n<ol>\n<li>命令行运行<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python detect.py --weights runs/train/exp17/weights/best.pt --<span class=\"built_in\">source</span> data/Samples/ --device cpu</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>weights</code> 为最终训练出来的模型<br><code>source</code> 为测试图片存放位置<br><code>device</code> 为加载模型使用的设备</p>\n</blockquote>\n</li>\n<li>pycharm中指定参数<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h46jjh1ykgj30pk0epq7m.jpg\" alt=\"image.png\"><blockquote>\n<p>在pycharm的配置中添加参数，直接运行即可</p>\n</blockquote>\n</li>\n</ol>\n<p>运行结束后会在<code>yolov5\\runs\\detect</code>路径中查看识别结果，可以看到识别准确率还是非常高的，至此我们的目标识别这一部分就做完了<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h46jx9pmlpj30i903ywgj.jpg\" alt=\"image.png\"></p>\n<h2 id=\"小图切割\"><a href=\"#小图切割\" class=\"headerlink\" title=\"小图切割\"></a>小图切割</h2><p>当大图的训练结束之后，则需要处理小图了。在大量观察后发现小图均有一定的规律，提示要点击的文字均处在同一位置上，那么我们就可以通过最简单的方法：直接指定像素进行图片切割来快速提取出来需要点击的文字<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h46kmrmjjxj30q409q462.jpg\" alt=\"image.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">splitimage</span>(<span class=\"params\">img</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 小图切割</span></span><br><span class=\"line\">    coordinates_list = [<span class=\"number\">149</span>, <span class=\"number\">192</span>, <span class=\"number\">235</span>]  <span class=\"comment\"># 需要切割的像素位置</span></span><br><span class=\"line\">    result = <span class=\"built_in\">list</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index, x <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(coordinates_list):</span><br><span class=\"line\">        box = (x, <span class=\"number\">1</span>, x + <span class=\"number\">26</span>, <span class=\"number\">28</span>)</span><br><span class=\"line\">        small_pic = img.crop(box)</span><br><span class=\"line\">        result.append(small_pic)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">big_img_dir = <span class=\"string\">r&#x27;.\\yolov5\\data\\images&#x27;</span>  <span class=\"comment\"># 大图所在路径</span></span><br><span class=\"line\">yolo_img_list = os.listdir(big_img_dir)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> img_name <span class=\"keyword\">in</span> yolo_img_list:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(img_name)</span><br><span class=\"line\"></span><br><span class=\"line\">    img_name = img_name.split(<span class=\"string\">&#x27;.&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    cut_img_list = splitimage(Image.<span class=\"built_in\">open</span>(<span class=\"string\">fr&#x27;small_img/<span class=\"subst\">&#123;img_name&#125;</span>.png&#x27;</span>))  <span class=\"comment\"># 与大图对应的小图进行切割</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(<span class=\"string\">f&#x27;./small_img_cut/<span class=\"subst\">&#123;img_name&#125;</span>&#x27;</span>):</span><br><span class=\"line\">        os.makedirs(<span class=\"string\">f&#x27;./small_img_cut/<span class=\"subst\">&#123;img_name&#125;</span>&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> index, cut_img <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(cut_img_list):</span><br><span class=\"line\">        cut_img.save(<span class=\"string\">f&#x27;./small_img_cut/<span class=\"subst\">&#123;img_name&#125;</span>/<span class=\"subst\">&#123;index&#125;</span>.png&#x27;</span>)  <span class=\"comment\"># 切割后图片保存</span></span><br></pre></td></tr></table></figure>\n<p>运行结束后可以看到每个小图已经切割成功，并单独存入单独的文件夹内<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h47eihrabnj30860c778e.jpg\" alt=\"image.png\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h47eisgj0lj309603rt8r.jpg\" alt=\"image.png\"><br>那么这一步小图也处理完成，仅仅剩下最后一步就可以完成识别了</p>\n<h2 id=\"孪生网络相似度训练\"><a href=\"#孪生网络相似度训练\" class=\"headerlink\" title=\"孪生网络相似度训练\"></a>孪生网络相似度训练</h2><h3 id=\"孪生网络简介\"><a href=\"#孪生网络简介\" class=\"headerlink\" title=\"孪生网络简介\"></a>孪生网络简介</h3><p>这里就不过多介绍了，可以直接去大佬github中详细学习<a href=\"https://github.com/bubbliiiing/Siamese-keras\">点击进入</a></p>\n<h3 id=\"数据集制作-1\"><a href=\"#数据集制作-1\" class=\"headerlink\" title=\"数据集制作\"></a>数据集制作</h3><p>这里我对yolov5中的detect.py进行了小小的改动，将识别出来的大图放入到之前切割好的小图中，方便我们后续操作<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h47r3g7i0oj30po04rdhy.jpg\" alt=\"image.png\"><br>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> utils.augmentations <span class=\"keyword\">import</span> letterbox</span><br><span class=\"line\"><span class=\"keyword\">from</span> models.common <span class=\"keyword\">import</span> DetectMultiBackend</span><br><span class=\"line\"><span class=\"keyword\">from</span> utils.general <span class=\"keyword\">import</span> check_img_size, non_max_suppression, scale_coords</span><br><span class=\"line\"><span class=\"keyword\">from</span> utils.plots <span class=\"keyword\">import</span> save_one_box</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Detect</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,</span></span><br><span class=\"line\"><span class=\"params\">                 weights=<span class=\"string\">&#x27;weights/best.pt&#x27;</span>,  <span class=\"comment\"># model.pt path(s)</span></span></span><br><span class=\"line\"><span class=\"params\">                 source=<span class=\"string\">&#x27;data/Samples&#x27;</span>,  <span class=\"comment\"># file/dir/URL/glob, 0 for webcam</span></span></span><br><span class=\"line\"><span class=\"params\">                 data=<span class=\"string\">&#x27;data/coco128.yaml&#x27;</span>,  <span class=\"comment\"># dataset.yaml path</span></span></span><br><span class=\"line\"><span class=\"params\">                 imgsz=(<span class=\"params\"><span class=\"number\">640</span>, <span class=\"number\">640</span></span>),  <span class=\"comment\"># inference size (height, width)</span></span></span><br><span class=\"line\"><span class=\"params\">                 project=<span class=\"string\">&#x27;runs/detect&#x27;</span>,  <span class=\"comment\"># save results to project/name</span></span></span><br><span class=\"line\"><span class=\"params\">                 </span>):</span><br><span class=\"line\">        self.source = <span class=\"built_in\">str</span>(source)</span><br><span class=\"line\">        self.weights = weights</span><br><span class=\"line\">        self.data = data</span><br><span class=\"line\">        self.imgsz = imgsz</span><br><span class=\"line\"></span><br><span class=\"line\">        self.model = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.save_dir = Path(project)  <span class=\"comment\"># increment run</span></span><br><span class=\"line\">        self.save_dir.mkdir(parents=<span class=\"literal\">True</span>, exist_ok=<span class=\"literal\">True</span>)  <span class=\"comment\"># make dir</span></span><br><span class=\"line\">        self.load_model()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">load_model</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.model = DetectMultiBackend(self.weights, data=self.data)</span><br><span class=\"line\">        stride, names, pt = self.model.stride, self.model.names, self.model.pt</span><br><span class=\"line\">        imgsz = check_img_size(self.imgsz, s=stride)  <span class=\"comment\"># check image size</span></span><br><span class=\"line\">        bs = <span class=\"number\">1</span>  <span class=\"comment\"># batch_size</span></span><br><span class=\"line\">        self.model.warmup(imgsz=(<span class=\"number\">1</span> <span class=\"keyword\">if</span> pt <span class=\"keyword\">else</span> bs, <span class=\"number\">3</span>, *imgsz))  <span class=\"comment\"># warmup</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">identify</span>(<span class=\"params\">self, pic_path</span>):</span><br><span class=\"line\">        im0s = cv2.imread(pic_path)</span><br><span class=\"line\">        img = letterbox(im0s)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        img = img.transpose((<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>))[::-<span class=\"number\">1</span>]  <span class=\"comment\"># HWC to CHW, BGR to RGB</span></span><br><span class=\"line\">        im = np.ascontiguousarray(img)</span><br><span class=\"line\">        im = torch.from_numpy(im).to().<span class=\"built_in\">float</span>()</span><br><span class=\"line\">        im /= <span class=\"number\">255</span>  <span class=\"comment\"># 0 - 255 to 0.0 - 1.0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(im.shape) == <span class=\"number\">3</span>:</span><br><span class=\"line\">            im = im[<span class=\"literal\">None</span>]  <span class=\"comment\"># expand for batch dim</span></span><br><span class=\"line\"></span><br><span class=\"line\">        pred = self.model(im)</span><br><span class=\"line\">        pred = non_max_suppression(pred)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, det <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(pred):  <span class=\"comment\"># per image</span></span><br><span class=\"line\">            im0 = im0s.copy()</span><br><span class=\"line\"></span><br><span class=\"line\">            p = Path(pic_path)  <span class=\"comment\"># to Path</span></span><br><span class=\"line\">            imc = im0.copy()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(det):</span><br><span class=\"line\">                det[:, :<span class=\"number\">4</span>] = scale_coords(im.shape[<span class=\"number\">2</span>:], det[:, :<span class=\"number\">4</span>], im0.shape).<span class=\"built_in\">round</span>()</span><br><span class=\"line\">                <span class=\"keyword\">for</span> *xyxy, conf, cls <span class=\"keyword\">in</span> <span class=\"built_in\">reversed</span>(det):</span><br><span class=\"line\">                    save_file_path = Path(<span class=\"string\">r&#x27;E:\\blog\\deep_learn\\small_img_cut&#x27;</span>) / p.stem / <span class=\"string\">f&#x27;<span class=\"subst\">&#123;p.stem&#125;</span>.jpg&#x27;</span></span><br><span class=\"line\">                    save_one_box(xyxy, imc, file=save_file_path, BGR=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    <span class=\"comment\"># print([i.cpu().detach().numpy().tolist() for i in xyxy])</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> os</span><br><span class=\"line\">    test = Detect()</span><br><span class=\"line\"></span><br><span class=\"line\">    pic_list = os.listdir(<span class=\"string\">r&#x27;E:\\blog\\deep_learn\\yolov5\\data\\images&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> pic <span class=\"keyword\">in</span> pic_list:</span><br><span class=\"line\">        test.identify(<span class=\"string\">fr&#x27;E:\\blog\\deep_learn\\big_img\\&#123;pic&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>接下来需要将相同的文字都放入到一个单独的文件夹内，为了能够快速处理，可以使用一下代码实现。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> tkinter</span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">FILE = Path(__file__).resolve()</span><br><span class=\"line\">ROOT = FILE.parents[<span class=\"number\">0</span>]</span><br><span class=\"line\">ROOT = Path(os.path.relpath(ROOT, Path.cwd()))</span><br><span class=\"line\">root = tkinter.Tk()</span><br><span class=\"line\">root.title(<span class=\"string\">&quot;Preview&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">num = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">image_Splicing</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> big_pic <span class=\"keyword\">in</span> data[<span class=\"string\">&#x27;big_pic_path&#x27;</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> small_pic <span class=\"keyword\">in</span> data[<span class=\"string\">&#x27;small_pic_path&#x27;</span>]:</span><br><span class=\"line\"></span><br><span class=\"line\">            cv2.namedWindow(<span class=\"string\">&#x27;Face&#x27;</span>, <span class=\"number\">0</span>)  <span class=\"comment\"># 创建一个名为“Face”的窗口用于显示图像</span></span><br><span class=\"line\">            cv2.moveWindow(<span class=\"string\">&#x27;Face&#x27;</span>, <span class=\"number\">100</span>, <span class=\"number\">50</span>)  <span class=\"comment\"># 移动窗口到适当位置</span></span><br><span class=\"line\">            cv2.resizeWindow(<span class=\"string\">&#x27;Face&#x27;</span>, <span class=\"number\">350</span>, <span class=\"number\">175</span>)</span><br><span class=\"line\">            img1 = cv2.imread(<span class=\"built_in\">str</span>(big_pic))</span><br><span class=\"line\">            img2 = cv2.imread(<span class=\"built_in\">str</span>(small_pic))</span><br><span class=\"line\"></span><br><span class=\"line\">            img1 = cv2.resize(img1, (<span class=\"number\">640</span>, <span class=\"number\">640</span>))</span><br><span class=\"line\">            img2 = cv2.resize(img2, (<span class=\"number\">640</span>, <span class=\"number\">640</span>))</span><br><span class=\"line\">            new_img = np.hstack([img1, img2])</span><br><span class=\"line\">            cv2.imshow(<span class=\"string\">&#x27;Face&#x27;</span>, new_img)  <span class=\"comment\"># 显示图像</span></span><br><span class=\"line\">            cv2.waitKey(<span class=\"number\">100</span>)  <span class=\"comment\"># 设置显示时间，1000ms</span></span><br><span class=\"line\">            judge = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;是否相同：&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> judge:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(big_pic, small_pic)</span><br><span class=\"line\">                tag_pic(big_pic, small_pic)</span><br><span class=\"line\">                data[<span class=\"string\">&#x27;big_pic_path&#x27;</span>].remove(big_pic)</span><br><span class=\"line\">                data[<span class=\"string\">&#x27;small_pic_path&#x27;</span>].remove(small_pic)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> image_Splicing(data)</span><br><span class=\"line\"></span><br><span class=\"line\">            cv2.destroyWindow(<span class=\"string\">&#x27;Face&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_pic_list</span>():</span><br><span class=\"line\">    pic_id_list = os.listdir(Path(ROOT / <span class=\"string\">&#x27;small_img_cut&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> pic_id <span class=\"keyword\">in</span> pic_id_list:</span><br><span class=\"line\">        pic_list = os.listdir(Path(ROOT / <span class=\"string\">&#x27;small_img_cut&#x27;</span> / pic_id))</span><br><span class=\"line\">        data = &#123;<span class=\"string\">&#x27;pic_id&#x27;</span>: pic_id, <span class=\"string\">&#x27;small_pic_path&#x27;</span>: [], <span class=\"string\">&#x27;big_pic_path&#x27;</span>: []&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> pic <span class=\"keyword\">in</span> pic_list:</span><br><span class=\"line\">            pic_path = Path(ROOT / <span class=\"string\">&#x27;small_img_cut&#x27;</span> / pic_id / pic)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(pic_path.stem) &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">                data[<span class=\"string\">&#x27;small_pic_path&#x27;</span>].append(pic_path)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                data[<span class=\"string\">&#x27;big_pic_path&#x27;</span>].append(pic_path)</span><br><span class=\"line\">        image_Splicing(data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hash</span>():</span><br><span class=\"line\">    time12 = <span class=\"built_in\">int</span>(time.time() * <span class=\"number\">1000</span>)</span><br><span class=\"line\">    rand04 = random.randint(<span class=\"number\">1000</span>, <span class=\"number\">9999</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> md5(<span class=\"built_in\">str</span>(time12) + <span class=\"built_in\">str</span>(rand04))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">md5</span>(<span class=\"params\">*arg</span>):</span><br><span class=\"line\">    hl = hashlib.md5()</span><br><span class=\"line\">    line = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x: <span class=\"built_in\">str</span>(x), arg)))</span><br><span class=\"line\">    hl.update(line.encode(encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hl.hexdigest()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tag_pic</span>(<span class=\"params\">big_pic, small_pic</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> num</span><br><span class=\"line\">    path = <span class=\"string\">f&#x27;./Siamese-pytorch/datasets/images_background/pic<span class=\"subst\">&#123;num&#125;</span>&#x27;</span></span><br><span class=\"line\">    num += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(path):</span><br><span class=\"line\">        os.mkdir(path)</span><br><span class=\"line\"></span><br><span class=\"line\">    big_file = <span class=\"built_in\">open</span>(big_pic, <span class=\"string\">&quot;rb&quot;</span>)</span><br><span class=\"line\">    big_data = big_file.read()</span><br><span class=\"line\">    big_file.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">        new_file = <span class=\"built_in\">open</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;path&#125;</span>/<span class=\"subst\">&#123;<span class=\"built_in\">hash</span>()&#125;</span>.jpg&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>)</span><br><span class=\"line\">        new_file.write(big_data)</span><br><span class=\"line\">        new_file.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    small_file = <span class=\"built_in\">open</span>(small_pic, <span class=\"string\">&quot;rb&quot;</span>)</span><br><span class=\"line\">    small_data = small_file.read()</span><br><span class=\"line\">    small_file.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">        new_file = <span class=\"built_in\">open</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;path&#125;</span>/<span class=\"subst\">&#123;<span class=\"built_in\">hash</span>()&#125;</span>.jpg&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>)</span><br><span class=\"line\">        new_file.write(small_data)</span><br><span class=\"line\">        new_file.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    get_pic_list()</span><br></pre></td></tr></table></figure>\n<p>运行以上代码后可以看到会显示以下图片<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h4ce2aod6yj309s05raav.jpg\" alt=\"image.png\"><br>并且在控制台会有以下内容<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h4ce33kqxzj302t01d0sl.jpg\" alt=\"image.png\"><br>接下来只需要动动自己那发财的小手，如果相同则输入<code>1</code>后回车，如果不相同则直接回车。 就可以看到datasets中开始保存相同的文字图片了<br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h4d6854b5yj30ry08in12.jpg\" alt=\"image.png\"><br>接下来的开始训练，结束训练以及验证结果均可以查看大佬的github进行操作，这里直接说结果，可以看到识别准确率还是很高的</p>\n<p><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h4d6p2ylhnj30gk0aa41t.jpg\" alt=\"image.png\"><br><img src=\"http://tva1.sinaimg.cn/large/008lIB40ly1h4d6pcl6d1j30gv09f41s.jpg\" alt=\"image.png\"></p>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>最后只需要将两个识别方法进行拼接，并删除掉不相关代码，即可实现识别对应问题或图形，也可通过flask来实现接口调用</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl71powxo000399uidz1u5832","category_id":"cl71powxq000699ui9ihfb68g","_id":"cl71powxt000d99ui5uqhfyp8"}],"PostTag":[{"post_id":"cl71powxo000399uidz1u5832","tag_id":"cl71powxr000799ui77ybf3a5","_id":"cl71powxt000f99ui2o3q9dmg"},{"post_id":"cl71powxo000399uidz1u5832","tag_id":"cl71powxt000c99uifwo50snp","_id":"cl71powxt000g99ui6crz9xfn"},{"post_id":"cl71powxq000599ui9ej8dzft","tag_id":"cl71powxt000e99uicnicdq80","_id":"cl71powxt000i99ui6cdk4lec"},{"post_id":"cl71powxs000999ui9sneeidc","tag_id":"cl71powxt000h99ui1fglah8r","_id":"cl71powxu000k99ui5sqghk2y"},{"post_id":"cl71powxs000999ui9sneeidc","tag_id":"cl71powxu000j99ui83w623ah","_id":"cl71powxu000l99ui6fj10ae1"}],"Tag":[{"name":"blog","_id":"cl71powxr000799ui77ybf3a5"},{"name":"hexo","_id":"cl71powxt000c99uifwo50snp"},{"name":"安卓逆向","_id":"cl71powxt000e99uicnicdq80"},{"name":"python","_id":"cl71powxt000h99ui1fglah8r"},{"name":"深度学习","_id":"cl71powxu000j99ui83w623ah"}]}}